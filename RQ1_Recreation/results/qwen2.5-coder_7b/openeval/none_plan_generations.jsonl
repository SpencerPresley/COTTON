{"task_id": "Open/0", "problem_prompt": "def validPosition ( arr , N , K ) :\n    \"\"\"Write a function that takes in an array, the length of the array, and a number K.\n    The function calculates the sum of all the elements in the array.\n    Then, it checks each element in the array and counts how many elements, when increased by K, would be greater than the sum of all the other elements in the array.\n    Finally, the function returns the count.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def validPosition(arr, N, K):\n    total_sum = sum(arr)\n    count = 0\n    for i in range(N):\n        if arr[i] + K > total_sum - (arr[i] + K):\n            count += 1\n    return count", "raw_completion": "```python\ndef validPosition(arr, N, K):\n    total_sum = sum(arr)\n    count = 0\n    for i in range(N):\n        if arr[i] + K > total_sum - (arr[i] + K):\n            count += 1\n    return count\n```", "reference_code": "    count = 0 ; sum = 0 ;\n    for i in range ( N ) :\n        sum += arr [ i ] ;\n    for i in range ( N ) :\n        if ( ( arr [ i ] + K ) > ( sum - arr [ i ] ) ) :\n            count += 1 ;\n    return count ;\n"}
{"task_id": "Open/1", "problem_prompt": "def maxLen ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the frequency of the minimum value in the array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def maxLen(arr, n):\n    if n == 0:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)", "raw_completion": "```python\ndef maxLen(arr, n):\n    if n == 0:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)\n```", "reference_code": "    min_val = min ( arr ) ;\n    freq = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] == min_val ) :\n            freq += 1 ;\n    return freq ;\n"}
{"task_id": "Open/2", "problem_prompt": "def allBitsSetInTheGivenRange ( n , l , r ) :\n    \"\"\"Write a function that takes three integers n, l, and r and returns \"Yes\" if all the bits in the binary representation of n within the range from l to r (inclusive) are set to 1.\n    Otherwise, it returns \"No\".\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def allBitsSetInTheGivenRange(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return \"Yes\" if n & mask == mask else \"No\"", "raw_completion": "```python\ndef allBitsSetInTheGivenRange(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return \"Yes\" if n & mask == mask else \"No\"\n```", "reference_code": "    num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 )\n    new_num = n & num\n    if ( new_num == 0 ) :\n        return \"Yes\"\n    return \"No\"\n"}
{"task_id": "Open/3", "problem_prompt": "def countKdivPairs ( A , n , K ) :\n    \"\"\"Write a function that takes an array A, its length n, and an integer K as input.\n    The function counts the number of pairs in the array whose sum is divisible by K.\n    It returns the count of such pairs.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countKdivPairs(A, n, K):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] + A[j]) % K == 0:\n                count += 1\n    return count", "raw_completion": "```python\ndef countKdivPairs(A, n, K):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] + A[j]) % K == 0:\n                count += 1\n    return count\n```", "reference_code": "    freq = [ 0 for i in range ( K ) ]\n    ans = 0\n    for i in range ( n ) :\n        rem = A [ i ] % K\n        if ( rem != 0 ) :\n            ans += freq [ K - rem ]\n        else :\n            ans += freq [ 0 ]\n        freq [ rem ] += 1\n    return ans\n"}
{"task_id": "Open/4", "problem_prompt": "def isSpiltPossible ( n , a ) :\n    \"\"\"Write a function that takes an integer n and a list of integers a.\n    The function checks if it is possible to split the list into two parts such that the sum of each part is equal.\n    If it is possible, the function returns True, otherwise it returns False.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def isSpiltPossible(n, a):\n    total_sum = sum(a)\n    if total_sum % 2 != 0:\n        return False\n    target = total_sum // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in a:\n        for j in range(target, num - 1, -1):\n            dp[j] = dp[j] or dp[j - num]\n    return dp[target]", "raw_completion": "```python\ndef isSpiltPossible(n, a):\n    total_sum = sum(a)\n    if total_sum % 2 != 0:\n        return False\n    target = total_sum // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in a:\n        for j in range(target, num - 1, -1):\n            dp[j] = dp[j] or dp[j - num]\n    return dp[target]\n```", "reference_code": "    Sum = 0\n    c1 = 0\n    for i in range ( n ) :\n        Sum += a [ i ]\n        if ( a [ i ] == 1 ) :\n            c1 += 1\n    if ( Sum % 2 ) :\n        return False\n    if ( ( Sum // 2 ) % 2 == 0 ) :\n        return True\n    if ( c1 > 0 ) :\n        return True\n    else :\n        return False\n"}
{"task_id": "Open/5", "problem_prompt": "def findParity ( x ) :\n    \"\"\"Write a function that takes an integer as input and returns 1 if the number has odd parity (an odd number of 1 bits in its binary representation) or 0 if it has even parity (an even number of 1 bits in its binary representation).\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findParity(x):\n    x ^= x >> 1\n    x ^= x >> 2\n    x ^= x >> 4\n    x ^= x >> 8\n    x ^= x >> 16\n    return x & 1", "raw_completion": "```python\ndef findParity(x):\n    x ^= x >> 1\n    x ^= x >> 2\n    x ^= x >> 4\n    x ^= x >> 8\n    x ^= x >> 16\n    return x & 1\n```", "reference_code": "    y = x ^ ( x >> 1 ) ;\n    y = y ^ ( y >> 2 ) ;\n    y = y ^ ( y >> 4 ) ;\n    y = y ^ ( y >> 8 ) ;\n    y = y ^ ( y >> 16 ) ;\n    if ( y & 1 ) :\n        return 1 ;\n    return 0 ;\n"}
{"task_id": "Open/6", "problem_prompt": "def missing_elements ( vec ) :\n    \"\"\"Write a function that takes a list of integers and returns a list of missing elements.\n    The function first iterates through the input list and modifies the elements by changing the sign of the element at the index equal to the absolute value of the current element minus one.\n    Then, it iterates through the modified list and appends the indices of the positive elements plus one to the output list.\n    Finally, it returns the output list.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def missing_elements(vec):\n    n = len(vec)\n    for i in range(n):\n        index = abs(vec[i]) - 1\n        if index < n and vec[index] > 0:\n            vec[index] *= -1\n    \n    output = []\n    for i in range(n):\n        if vec[i] > 0:\n            output.append(i + 1)\n    \n    return output", "raw_completion": "```python\ndef missing_elements(vec):\n    n = len(vec)\n    for i in range(n):\n        index = abs(vec[i]) - 1\n        if index < n and vec[index] > 0:\n            vec[index] *= -1\n    \n    output = []\n    for i in range(n):\n        if vec[i] > 0:\n            output.append(i + 1)\n    \n    return output\n```", "reference_code": "    mis = [ ]\n    for i in range ( len ( vec ) ) :\n        temp = abs ( vec [ i ] ) - 1\n        if vec [ temp ] > 0 :\n            vec [ temp ] = - vec [ temp ]\n    for i in range ( len ( vec ) ) :\n        if ( vec [ i ] > 0 ) :\n            mis . append ( i + 1 )\n    return mis\n"}
{"task_id": "Open/7", "problem_prompt": "def findSubsequence ( arr , n ) :\n    \"\"\"Write a function that takes an array of integers and its length as input and returns the length of the longest subsequence in the array such that each element in the subsequence has at least one digit in common with every other element in the subsequence.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findSubsequence(arr, n):\n    def has_common_digit(a, b):\n        return any(digit in str(b) for digit in str(a))\n    \n    max_length = 0\n    \n    for i in range(n):\n        current_length = 1\n        for j in range(i + 1, n):\n            if has_common_digit(arr[i], arr[j]):\n                current_length += 1\n        max_length = max(max_length, current_length)\n    \n    return max_length", "raw_completion": "```python\ndef findSubsequence(arr, n):\n    def has_common_digit(a, b):\n        return any(digit in str(b) for digit in str(a))\n    \n    max_length = 0\n    \n    for i in range(n):\n        current_length = 1\n        for j in range(i + 1, n):\n            if has_common_digit(arr[i], arr[j]):\n                current_length += 1\n        max_length = max(max_length, current_length)\n    \n    return max_length\n```", "reference_code": "    length = 1 ;\n    dp = [ 0 ] * 10 ;\n    tmp = arr [ 0 ] ;\n    while ( tmp > 0 ) :\n        dp [ tmp % 10 ] = 1 ;\n        tmp //= 10 ;\n    for i in range ( 1 , n ) :\n        tmp = arr [ i ] ;\n        locMax = 1 ;\n        cnt = [ 0 ] * 10\n        while ( tmp > 0 ) :\n            cnt [ tmp % 10 ] = 1 ;\n            tmp //= 10 ;\n        for d in range ( 10 ) :\n            if ( cnt [ d ] ) :\n                dp [ d ] += 1 ;\n                locMax = max ( locMax , dp [ d ] ) ;\n        for d in range ( 10 ) :\n            if ( cnt [ d ] ) :\n                dp [ d ] = locMax ;\n        length = max ( length , locMax ) ;\n    return length ;\n"}
{"task_id": "Open/8", "problem_prompt": "import math\n\ndef Distinct_Prime_factors ( a ) :\n    \"\"\"Write a function that takes a list of integers and returns the number of distinct prime factors for each integer in the list.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef Distinct_Prime_factors(a):\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n\n    return [len(prime_factors(num)) for num in a]", "raw_completion": "```python\nimport math\n\ndef Distinct_Prime_factors(a):\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n\n    return [len(prime_factors(num)) for num in a]\n```", "reference_code": "    m = [ ]\n    for i in range ( len ( a ) ) :\n        sq = int ( math . sqrt ( a [ i ] ) )\n        for j in range ( 2 , sq + 1 ) :\n            if ( a [ i ] % j == 0 ) :\n                m . append ( j )\n                while ( a [ i ] % j == 0 ) :\n                    a [ i ] //= j\n        if ( a [ i ] > 2 ) :\n            m . append ( a [ i ] )\n    return len ( m )\n"}
{"task_id": "Open/9", "problem_prompt": "def findSum ( arr , n , k ) :\n    \"\"\"Write a function that takes an array, the length of the array, and an integer k as input.\n    The function calculates the sum of the difference between the kth largest element and the first element of the array, and the difference between the kth largest element and each element from index 1 to k.\n    The function returns the minimum value among these differences.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findSum(arr, n, k):\n    arr.sort()\n    kth_largest = arr[n - k]\n    min_diff = float('inf')\n    for i in range(k):\n        diff1 = abs(kth_largest - arr[0])\n        diff2 = abs(kth_largest - arr[i + 1])\n        min_diff = min(min_diff, diff1, diff2)\n    return min_diff", "raw_completion": "```python\ndef findSum(arr, n, k):\n    arr.sort()\n    kth_largest = arr[n - k]\n    min_diff = float('inf')\n    for i in range(k):\n        diff1 = abs(kth_largest - arr[0])\n        diff2 = abs(kth_largest - arr[i + 1])\n        min_diff = min(min_diff, diff1, diff2)\n    return min_diff\n```", "reference_code": "    ans = arr [ n - k - 1 ] - arr [ 0 ] ;\n    for i in range ( 1 , k + 1 ) :\n        ans = min ( arr [ n - 1 - ( k - i ) ] - arr [ i ] , ans ) ;\n    return ans ;\n"}
{"task_id": "Open/10", "problem_prompt": "from collections import deque\n\ndef run_tasks ( A , B ) :\n    \"\"\"Write a function that takes two lists, A and B, and returns the total time it takes to complete a series of tasks.\n    The function iterates through the lists, comparing each element from A with the corresponding element from B.\n    If the elements are equal, the total time is incremented by 1.\n    If the elements are not equal, the element from B is moved to the front of the list and the element from A is moved to the end of the list.\n    The total time is incremented by 2 in this case.\n    The function continues this process until all elements in A have been compared.\n    Finally, the function returns the total time.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "from collections import deque\n\ndef run_tasks(A, B):\n    total_time = 0\n    A = deque(A)\n    B = deque(B)\n\n    while A:\n        if A[0] == B[0]:\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else:\n            total_time += 2\n            element = A.popleft()\n            B.appendleft(element)\n\n    return total_time", "raw_completion": "```python\nfrom collections import deque\n\ndef run_tasks(A, B):\n    total_time = 0\n    A = deque(A)\n    B = deque(B)\n\n    while A:\n        if A[0] == B[0]:\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else:\n            total_time += 2\n            element = A.popleft()\n            B.appendleft(element)\n\n    return total_time\n```", "reference_code": "    total_time = 0\n    while ( len ( A ) > 0 ) :\n        x = A . popleft ( )\n        y = B . popleft ( )\n        if ( x == y ) :\n            total_time += 1\n        else :\n            B . appendleft ( y )\n            A . append ( x )\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/11", "problem_prompt": "def calculate ( array , size ) :\n    \"\"\"Write a function that takes an array and its size as input and returns the count of even numbers in the array, excluding 0 and 2.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def calculate(array, size):\n    return sum(1 for num in array if num % 2 == 0 and num not in [0, 2])", "raw_completion": "```python\ndef calculate(array, size):\n    return sum(1 for num in array if num % 2 == 0 and num not in [0, 2])\n```", "reference_code": "    count = 0\n    for i in range ( size ) :\n        if ( array [ i ] % 2 == 0 and array [ i ] != 0 and array [ i ] != 2 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/12", "problem_prompt": "def find_sub ( s , k ) :\n    \"\"\"Write a function that takes a string and an integer as input and returns the number of substrings in the string that contain at most k distinct characters.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def find_sub(s, k):\n    from collections import defaultdict\n\n    def at_most_k_distinct(sub):\n        return len(set(sub)) <= k\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if at_most_k_distinct(s[i:j]):\n                count += 1\n    return count", "raw_completion": "```python\ndef find_sub(s, k):\n    from collections import defaultdict\n\n    def at_most_k_distinct(sub):\n        return len(set(sub)) <= k\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if at_most_k_distinct(s[i:j]):\n                count += 1\n    return count\n```", "reference_code": "    Len = len ( s )\n    lp , rp = 0 , 0\n    ans = 0\n    hash_char = [ 0 for i in range ( 256 ) ]\n    for rp in range ( Len ) :\n        hash_char [ ord ( s [ rp ] ) ] += 1\n        while ( hash_char [ ord ( s [ rp ] ) ] > k ) :\n            hash_char [ ord ( s [ lp ] ) ] -= 1\n            lp += 1\n        ans += rp - lp + 1\n    return ans\n"}
{"task_id": "Open/13", "problem_prompt": "def Survives ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns True if the integer survives the given condition, or False otherwise.\n    The condition is as follows: starting from 2, divide the integer by the current number and subtract the result from the integer.\n    Repeat this process until the current number is greater than the integer.\n    If the integer reaches 1 at any point, return True.\n    If the integer is divisible by any of the current numbers, return False.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def Survives(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n        n -= n // i\n        if n == 1:\n            return True\n    return n == 1", "raw_completion": "```python\ndef Survives(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n        n -= n // i\n        if n == 1:\n            return True\n    return n == 1\n```", "reference_code": "    i = 2\n    while ( True ) :\n        if ( i > n ) :\n            return True ;\n        if ( n % i == 0 ) :\n            return False ;\n        n -= n // i ;\n        i += 1\n"}
{"task_id": "Open/14", "problem_prompt": "def computeXOR ( n ) :\n    \"\"\"Write a function that takes an integer as input and computes the XOR of the integer with a specific pattern.\n    The function uses a switch statement to determine the XOR value based on the remainder of the input integer divided by 4.\n    The switch statement has four cases: \n- If the remainder is 0, the function returns the input integer itself.\n   \n- If the remainder is 1, the function returns 1.\n   \n- If the remainder is 2, the function returns the input integer plus 1.\n   \n- If the remainder is 3, the function returns 0.\n   \nIf the input integer does not match any of the cases, the function returns an empty string.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def computeXOR(n):\n    remainder = n % 4\n    if remainder == 0:\n        return n\n    elif remainder == 1:\n        return 1\n    elif remainder == 2:\n        return n + 1\n    elif remainder == 3:\n        return 0\n    else:\n        return \"\"", "raw_completion": "```python\ndef computeXOR(n):\n    remainder = n % 4\n    if remainder == 0:\n        return n\n    elif remainder == 1:\n        return 1\n    elif remainder == 2:\n        return n + 1\n    elif remainder == 3:\n        return 0\n    else:\n        return \"\"\n```", "reference_code": "    switch = { 0 : n , 1 : 1 , 2 : n + 1 , 3 : 0 , }\n    return switch . get ( n & 3 , \"\" )\n"}
{"task_id": "Open/15", "problem_prompt": "import random\n\ndef lehmann ( n , t ) :\n    \"\"\"Write a function that takes two parameters, n and t, and performs the Lehmann primality test.\n    The function generates a random number a between 2 and n-1, and calculates the value of a raised to the power of (n-1)/2 modulo n.\n    It then checks if the result is equal to 1 or n-1.\n    If it is, the function generates a new random number a and repeats the process t times.\n    If the result is not equal to 1 or n-1, the function returns -1.\n    If all t iterations pass the test, the function returns 1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import random\n\ndef lehmann(n, t):\n    for _ in range(t):\n        a = random.randint(2, n-1)\n        if pow(a, (n-1)//2, n) not in [1, n-1]:\n            return -1\n    return 1", "raw_completion": "```python\nimport random\n\ndef lehmann(n, t):\n    for _ in range(t):\n        a = random.randint(2, n-1)\n        if pow(a, (n-1)//2, n) not in [1, n-1]:\n            return -1\n    return 1\n```", "reference_code": "    random . seed ( 1234 )\n    a = random . randint ( 2 , n - 1 )\n    e = ( n - 1 ) / 2\n    while ( t > 0 ) :\n        result = ( ( int ) ( a ** e ) ) % n\n        if ( ( result % n ) == 1 or ( result % n ) == ( n - 1 ) ) :\n            a = random . randint ( 2 , n - 1 )\n            t -= 1\n        else :\n            return - 1\n    return 1\n"}
{"task_id": "Open/16", "problem_prompt": "def isDefeat ( s1 , s2 , n ) :\n    \"\"\"Write a function that takes two strings, s1 and s2, and an integer n.\n    The function checks if there is a defeat condition between the two strings.\n    A defeat condition is defined as follows: if at any index i, s1[i] is '0' and s2[i] is '1', or s1[i] is '1' and s2[i] is '0', or s1[i] is '0' and s2[i] is 'Z', or s1[i] is 'Z' and s2[i] is '0', then the function returns True.\n    If no defeat condition is found after iterating through all indices, the function returns False.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def isDefeat(s1, s2, n):\n    for i in range(n):\n        if (s1[i] == '0' and s2[i] == '1') or \\\n           (s1[i] == '1' and s2[i] == '0') or \\\n           (s1[i] == '0' and s2[i] == 'Z') or \\\n           (s1[i] == 'Z' and s2[i] == '0'):\n            return True\n    return False", "raw_completion": "```python\ndef isDefeat(s1, s2, n):\n    for i in range(n):\n        if (s1[i] == '0' and s2[i] == '1') or \\\n           (s1[i] == '1' and s2[i] == '0') or \\\n           (s1[i] == '0' and s2[i] == 'Z') or \\\n           (s1[i] == 'Z' and s2[i] == '0'):\n            return True\n    return False\n```", "reference_code": "    for i in range ( n ) :\n        if ( ( s1 [ i ] == '0' and s2 [ i ] == '1' ) or ( s1 [ i ] == '1' and s2 [ i ] == '0' ) ) :\n            continue\n        elif ( ( s1 [ i ] == '0' and s2 [ i ] == 'Z' ) or ( s1 [ i ] == 'Z' and s2 [ i ] == '0' ) ) :\n            continue\n        else :\n            return True\n    return False\n"}
{"task_id": "Open/17", "problem_prompt": "def sum ( a , b , c , d , x ) :\n    \"\"\"Write a function that takes five parameters (a, b, c, d, x) and returns the result of the following equation: (x * (a + b) * (c - d)) / ((a * d) - (b * c)).\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def sum(a, b, c, d, x):\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))", "raw_completion": "```python\ndef sum(a, b, c, d, x):\n    return (x * (a + b) * (c - d)) / ((a * d) - (b * c))\n```", "reference_code": "    ans = ( ( x * ( a + b ) * ( c - d ) ) / ( ( a * d ) - ( b * c ) ) ) ;\n    return ans ;\n"}
{"task_id": "Open/18", "problem_prompt": "def minReplacement ( s , length ) :\n    \"\"\"Write a function that takes a string and its length as input and returns the minimum number of replacements needed to make the string alternate between '0' and '1' in the most efficient way.\n    The function should count the number of positions where the character at an even index is '1' and the character at an odd index is '0', and vice versa.\n    The function should then return the minimum of this count and the difference between the length of the string and the count.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def minReplacement(s, length):\n    even_ones = 0\n    odd_zeros = 0\n    \n    for i in range(length):\n        if i % 2 == 0 and s[i] == '1':\n            even_ones += 1\n        elif i % 2 != 0 and s[i] == '0':\n            odd_zeros += 1\n    \n    return min(even_ones, odd_zeros)", "raw_completion": "```python\ndef minReplacement(s, length):\n    even_ones = 0\n    odd_zeros = 0\n    \n    for i in range(length):\n        if i % 2 == 0 and s[i] == '1':\n            even_ones += 1\n        elif i % 2 != 0 and s[i] == '0':\n            odd_zeros += 1\n    \n    return min(even_ones, odd_zeros)\n```", "reference_code": "    ans = 0\n    for i in range ( 0 , length ) :\n        if i % 2 == 0 and s [ i ] == '1' :\n            ans += 1\n        if i % 2 == 1 and s [ i ] == '0' :\n            ans += 1\n    return min ( ans , length - ans )\n"}
{"task_id": "Open/19", "problem_prompt": "import math\n\ndef powerNumbers ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the number of power numbers less than or equal to n.\n    A power number is a number that can be expressed as the power of another number.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef powerNumbers(n):\n    count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        power = i ** 2\n        while power <= n:\n            count += 1\n            power *= i\n    return count", "raw_completion": "```python\nimport math\n\ndef powerNumbers(n):\n    count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        power = i ** 2\n        while power <= n:\n            count += 1\n            power *= i\n    return count\n```", "reference_code": "    v = [ ]\n    for i in range ( 2 , int ( math . pow ( n , 1.0 / 3.0 ) ) + 1 ) :\n        j = i * i\n        while ( j * i <= n ) :\n            j = j * i\n            s = int ( math . sqrt ( j ) )\n            if ( s * s != j ) :\n                v . append ( j )\n    v . sort ( )\n    v = list ( dict . fromkeys ( v ) )\n    return len ( v ) + int ( math . sqrt ( n ) )\n"}
{"task_id": "Open/20", "problem_prompt": "def product ( x , y ) :\n    \"\"\"Write a function that takes two numbers, x and y, and returns their product.\n    The function uses recursion to calculate the product by repeatedly adding x to itself y times.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def product(x, y):\n    if y == 0:\n        return 0\n    elif y > 0:\n        return x + product(x, y - 1)\n    else:\n        return -product(x, -y)", "raw_completion": "```python\ndef product(x, y):\n    if y == 0:\n        return 0\n    elif y > 0:\n        return x + product(x, y - 1)\n    else:\n        return -product(x, -y)\n```", "reference_code": "    if x < y :\n        return product ( y , x )\n    elif y != 0 :\n        return ( x + product ( x , y - 1 ) )\n    else :\n        return 0\n"}
{"task_id": "Open/21", "problem_prompt": "def decideWinner ( a , n ) :\n    \"\"\"Write a function that takes a list of integers and the length of the list as input.\n    The function counts the number of integers in the list that are divisible by 4 and assigns the count to variables count0, count1, count2, and count3 based on the remainder of the division by 4.\n    If the count of integers divisible by 4 is even for all four possible remainders (0, 1, 2, and 3), the function returns 1.\n    Otherwise, it returns 2.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def decideWinner(a, n):\n    count0 = count1 = count2 = count3 = 0\n    for num in a:\n        if num % 4 == 0:\n            count0 += 1\n        elif num % 4 == 1:\n            count1 += 1\n        elif num % 4 == 2:\n            count2 += 1\n        elif num % 4 == 3:\n            count3 += 1\n    if all(count % 2 == 0 for count in [count0, count1, count2, count3]):\n        return 1\n    else:\n        return 2", "raw_completion": "```python\ndef decideWinner(a, n):\n    count0 = count1 = count2 = count3 = 0\n    for num in a:\n        if num % 4 == 0:\n            count0 += 1\n        elif num % 4 == 1:\n            count1 += 1\n        elif num % 4 == 2:\n            count2 += 1\n        elif num % 4 == 3:\n            count3 += 1\n    if all(count % 2 == 0 for count in [count0, count1, count2, count3]):\n        return 1\n    else:\n        return 2\n```", "reference_code": "    count0 = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for i in range ( n ) :\n        if ( a [ i ] % 4 == 0 ) :\n            count0 += 1\n        elif ( a [ i ] % 4 == 1 ) :\n            count1 += 1\n        elif ( a [ i ] % 4 == 2 ) :\n            count2 += 1\n        elif ( a [ i ] % 4 == 3 ) :\n            count3 += 1\n    if ( count0 % 2 == 0 and count1 % 2 == 0 and count2 % 2 == 0 and count3 == 0 ) :\n        return 1\n    else :\n        return 2\n"}
{"task_id": "Open/22", "problem_prompt": "def lenOfLongIncSubArr ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the length of the longest increasing subarray in the given array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def lenOfLongIncSubArr(arr, n):\n    if n == 0:\n        return 0\n    \n    max_len = 1\n    current_len = 1\n    \n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 1\n    \n    return max_len", "raw_completion": "```python\ndef lenOfLongIncSubArr(arr, n):\n    if n == 0:\n        return 0\n    \n    max_len = 1\n    current_len = 1\n    \n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 1\n    \n    return max_len\n```", "reference_code": "    m = 1\n    l = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            l = l + 1\n        else :\n            if ( m < l ) :\n                m = l\n            l = 1\n    if ( m < l ) :\n        m = l\n    return m\n"}
{"task_id": "Open/23", "problem_prompt": "def subsetSum ( arr , n , i , sum , count ) :\n    \"\"\"Write a function that takes an array of integers, the length of the array, the current index, a target sum, and a count.\n    The function recursively calculates the number of subsets of the array that sum up to the target sum.\n    The base case is when the current index is equal to the length of the array.\n    If the sum is equal to 0, the count is incremented.\n    The function then calls itself twice, once subtracting the current element from the sum and once without subtracting.\n    Finally, the function returns the count.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def subsetSum(arr, n, i, sum, count):\n    if i == n:\n        if sum == 0:\n            return count + 1\n        else:\n            return count\n    count = subsetSum(arr, n, i + 1, sum - arr[i], count)\n    count = subsetSum(arr, n, i + 1, sum, count)\n    return count", "raw_completion": "```python\ndef subsetSum(arr, n, i, sum, count):\n    if i == n:\n        if sum == 0:\n            return count + 1\n        else:\n            return count\n    count = subsetSum(arr, n, i + 1, sum - arr[i], count)\n    count = subsetSum(arr, n, i + 1, sum, count)\n    return count\n```", "reference_code": "    if ( i == n ) :\n        if ( sum == 0 ) :\n            count += 1\n        return count\n    count = subsetSum ( arr , n , i + 1 , sum - arr [ i ] , count )\n    count = subsetSum ( arr , n , i + 1 , sum , count )\n    return count\n"}
{"task_id": "Open/24", "problem_prompt": "def center_hexadecagonal_num ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the center hexadecagonal number for that value.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def center_hexadecagonal_num(n):\n    return 3 * n * (2 * n - 1)", "raw_completion": "```python\ndef center_hexadecagonal_num(n):\n    return 3 * n * (2 * n - 1)\n```", "reference_code": "    return 8 * n * n - 8 * n + 1\n"}
{"task_id": "Open/25", "problem_prompt": "def seriesFunc ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the sum of the squares of the first n natural numbers, the sum of the first n natural numbers, and adds 1 to the total sum.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def seriesFunc(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_squares + sum_of_numbers + 1", "raw_completion": "```python\ndef seriesFunc(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_squares + sum_of_numbers + 1\n```", "reference_code": "    sumSquare = ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6\n    sumNatural = ( n * ( n + 1 ) / 2 )\n    return ( sumSquare + sumNatural + 1 )\n"}
{"task_id": "Open/26", "problem_prompt": "def maxSumLCM ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the maximum sum of all the factors of n.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def maxSumLCM(n):\n    def get_factors(num):\n        factors = set()\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.add(i)\n                factors.add(num // i)\n        return factors\n\n    factors = get_factors(n)\n    max_sum = sum(factors)\n    return max_sum", "raw_completion": "```python\ndef maxSumLCM(n):\n    def get_factors(num):\n        factors = set()\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.add(i)\n                factors.add(num // i)\n        return factors\n\n    factors = get_factors(n)\n    max_sum = sum(factors)\n    return max_sum\n```", "reference_code": "    max_sum = 0\n    i = 1\n    while ( i * i <= n ) :\n        if ( n % i == 0 ) :\n            max_sum = max_sum + i\n            if ( n // i != i ) :\n                max_sum = max_sum + ( n // i )\n        i = i + 1\n    return max_sum\n"}
{"task_id": "Open/27", "problem_prompt": "def findGreater ( x , y ) :\n    \"\"\"Write a function that takes two numbers, x and y, and returns True if x is less than or equal to y, and False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findGreater(x, y):\n    return x <= y", "raw_completion": "```python\ndef findGreater(x, y):\n    return x <= y\n```", "reference_code": "    if ( x > y ) :\n        return False ;\n    else :\n        return True ;\n"}
{"task_id": "Open/28", "problem_prompt": "def center_octadecagon_num ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the center octadecagon number.\n    The center octadecagon number is calculated using the formula 9 * n * n - 9 * n + 1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def center_octadecagon_num(n):\n    return 9 * n * n - 9 * n + 1", "raw_completion": "```python\ndef center_octadecagon_num(n):\n    return 9 * n * n - 9 * n + 1\n```", "reference_code": "    return ( 9 * n * n - 9 * n + 1 )\n"}
{"task_id": "Open/29", "problem_prompt": "def percent ( a , b ) :\n    \"\"\"Write a function that takes two numbers, a and b, and returns the percentage increase or decrease from a to b.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def percent(a, b):\n    return ((b - a) / a) * 100 if a != 0 else \"Undefined\"", "raw_completion": "```python\ndef percent(a, b):\n    return ((b - a) / a) * 100 if a != 0 else \"Undefined\"\n```", "reference_code": "    result = int ( ( ( b - a ) * 100 ) / a )\n    return result\n"}
{"task_id": "Open/30", "problem_prompt": "def AvgofSquareN ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the average of the squares of the first n natural numbers.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def AvgofSquareN(n):\n    return sum(i**2 for i in range(1, n+1)) / n", "raw_completion": "```python\ndef AvgofSquareN(n):\n    return sum(i**2 for i in range(1, n+1)) / n\n```", "reference_code": "    return ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;\n"}
{"task_id": "Open/31", "problem_prompt": "def ksmallest ( arr , n , k ) :\n    \"\"\"Write a function that takes an array, its length, and an integer k as input.\n    The function returns the kth smallest element in the array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def ksmallest(arr, n, k):\n    arr.sort()\n    return arr[k-1]", "raw_completion": "```python\ndef ksmallest(arr, n, k):\n    arr.sort()\n    return arr[k-1]\n```", "reference_code": "    for i in range ( n ) :\n        if ( arr [ i ] <= k ) :\n            k = k + 1 ;\n        else :\n            break ;\n    return k ;\n"}
{"task_id": "Open/32", "problem_prompt": "def getChicks ( n ) :\n    \"\"\"Write a function that takes an integer n as input and returns the number of chicks.\n    The number of chicks is calculated by raising 3 to the power of (n-1).\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def getChicks(n):\n    return 3 ** (n - 1)", "raw_completion": "```python\ndef getChicks(n):\n    return 3 ** (n - 1)\n```", "reference_code": "    chicks = pow ( 3 , n - 1 )\n    return chicks\n"}
{"task_id": "Open/33", "problem_prompt": "def findTerm ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth term of a sequence.\n    The sequence starts with 1 and each subsequent term is calculated by multiplying the previous term by 2 and adding the difference between the current index and 1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findTerm(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * findTerm(n - 1) + (n - 1)", "raw_completion": "```python\ndef findTerm(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * findTerm(n - 1) + (n - 1)\n```", "reference_code": "    if n == 1 :\n        return n\n    else :\n        term = 7\n        for i in range ( 2 , n + 1 ) :\n            term = term * 2 + ( i - 1 ) ;\n    return term ;\n"}
{"task_id": "Open/34", "problem_prompt": "def countSubArrayProductLessThanK ( a , k ) :\n    \"\"\"Write a function that takes in a list of integers and a target integer, and returns the number of subarrays in the list whose product is less than the target integer.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countSubArrayProductLessThanK(a, k):\n    if k <= 1:\n        return 0\n    \n    left = 0\n    current_product = 1\n    count = 0\n    \n    for right in range(len(a)):\n        current_product *= a[right]\n        \n        while current_product >= k:\n            current_product //= a[left]\n            left += 1\n        \n        count += right - left + 1\n    \n    return count", "raw_completion": "```python\ndef countSubArrayProductLessThanK(a, k):\n    if k <= 1:\n        return 0\n    \n    left = 0\n    current_product = 1\n    count = 0\n    \n    for right in range(len(a)):\n        current_product *= a[right]\n        \n        while current_product >= k:\n            current_product //= a[left]\n            left += 1\n        \n        count += right - left + 1\n    \n    return count\n```", "reference_code": "    n = len ( a )\n    p = 1\n    res = 0\n    start = 0\n    end = 0\n    while ( end < n ) :\n        p *= a [ end ]\n        while ( start < end and p >= k ) :\n            p = int ( p // a [ start ] )\n            start += 1\n        if ( p < k ) :\n            l = end - start + 1\n            res += l\n        end += 1\n    return res\n"}
{"task_id": "Open/35", "problem_prompt": "import math\n\ndef getOccurence ( n , d ) :\n    \"\"\"Write a function that takes two integers, n and d, and returns the number of times the digit d occurs in the numbers from 1 to n (inclusive).\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def getOccurence(n, d):\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count(str(d))\n    return count", "raw_completion": "```python\ndef getOccurence(n, d):\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count(str(d))\n    return count\n```", "reference_code": "    result = 0 ;\n    itr = d ;\n    while ( itr <= n ) :\n        if ( itr % 10 == d ) :\n            result += 1 ;\n        if ( itr != 0 and math . floor ( itr / 10 ) == d ) :\n            result += 1 ;\n            itr += 1 ;\n        elif ( math . floor ( itr / 10 ) == d - 1 ) :\n            itr = itr + ( 10 - d ) ;\n        else :\n            itr = itr + 10 ;\n    return result ;\n"}
{"task_id": "Open/36", "problem_prompt": "def findMissingPositive ( arr , n ) :\n    \"\"\"Write a function that takes an array of integers and its length as input and returns the smallest positive integer that is missing from the array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findMissingPositive(arr, n):\n    contains_one = False\n    for num in arr:\n        if num == 1:\n            contains_one = True\n            break\n    if not contains_one:\n        return 1\n    \n    arr = [num if num > 0 else float('inf') for num in arr]\n    n = len(arr)\n    \n    for i in range(n):\n        index = abs(arr[i]) - 1\n        if index < n and arr[index] > 0:\n            arr[index] = -arr[index]\n    \n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n    \n    return n + 1", "raw_completion": "```python\ndef findMissingPositive(arr, n):\n    contains_one = False\n    for num in arr:\n        if num == 1:\n            contains_one = True\n            break\n    if not contains_one:\n        return 1\n    \n    arr = [num if num > 0 else float('inf') for num in arr]\n    n = len(arr)\n    \n    for i in range(n):\n        index = abs(arr[i]) - 1\n        if index < n and arr[index] > 0:\n            arr[index] = -arr[index]\n    \n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n    \n    return n + 1\n```", "reference_code": "    m = 1\n    x = [ ]\n    for i in range ( n ) :\n        if ( m < arr [ i ] ) :\n            x . append ( arr [ i ] )\n        elif ( m == arr [ i ] ) :\n            m = m + 1\n            while ( x . count ( m ) ) :\n                x . remove ( m )\n                m = m + 1\n    return m\n"}
{"task_id": "Open/37", "problem_prompt": "def ways ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the number of ways to climb a staircase with n steps.\n    Each time, you can either climb 1 or 2 steps.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def ways(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "raw_completion": "```python\ndef ways(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```", "reference_code": "    first = 2 ;\n    second = 3 ;\n    res = 0 ;\n    for i in range ( 3 , n + 1 ) :\n        res = first + second ;\n        first = second ;\n        second = res ;\n    return res ;\n"}
{"task_id": "Open/38", "problem_prompt": "def calculateAreaSum ( l , b ) :\n    \"\"\"Write a function that takes two parameters, l and b, representing the length and breadth of a rectangle.\n    The function calculates the sum of the areas of all the squares that can fit inside the rectangle.\n    It starts with a square of size 1 and gradually increases the size until it reaches the maximum size that can fit inside the rectangle.\n    The function returns the total area of all the squares.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def calculateAreaSum(l, b):\n    total_area = 0\n    max_size = min(l, b)\n    for size in range(1, max_size + 1):\n        total_area += size * size\n    return total_area", "raw_completion": "```python\ndef calculateAreaSum(l, b):\n    total_area = 0\n    max_size = min(l, b)\n    for size in range(1, max_size + 1):\n        total_area += size * size\n    return total_area\n```", "reference_code": "    size = 1\n    maxSize = min ( l , b )\n    totalArea = 0\n    for i in range ( 1 , maxSize + 1 ) :\n        totalSquares = ( ( l - size + 1 ) * ( b - size + 1 ) )\n        area = ( totalSquares * size * size )\n        totalArea += area\n        size += 1\n    return totalArea\n"}
{"task_id": "Open/39", "problem_prompt": "def count ( N ) :\n    \"\"\"Write a function that takes an integer N and returns the sum of all numbers from 1 to N.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def count(N):\n    return sum(range(1, N + 1))", "raw_completion": "```python\ndef count(N):\n    return sum(range(1, N + 1))\n```", "reference_code": "    a = 0 ;\n    a = ( N * ( N + 1 ) ) / 2 ;\n    return int ( a ) ;\n"}
{"task_id": "Open/40", "problem_prompt": "def countIterations ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the maximum number of consecutive zeros between two ones in the array.\n    If there are no ones in the array, the function should return -1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countIterations(arr, n):\n    max_zeros = -1\n    current_zeros = 0\n    found_one = False\n\n    for i in range(n):\n        if arr[i] == 1:\n            if found_one and current_zeros > max_zeros:\n                max_zeros = current_zeros\n            current_zeros = 0\n            found_one = True\n        elif found_one:\n            current_zeros += 1\n\n    return max_zeros", "raw_completion": "```python\ndef countIterations(arr, n):\n    max_zeros = -1\n    current_zeros = 0\n    found_one = False\n\n    for i in range(n):\n        if arr[i] == 1:\n            if found_one and current_zeros > max_zeros:\n                max_zeros = current_zeros\n            current_zeros = 0\n            found_one = True\n        elif found_one:\n            current_zeros += 1\n\n    return max_zeros\n```", "reference_code": "    oneFound = False ;\n    res = 0 ;\n    i = 0 ;\n    while ( i < n ) :\n        if ( arr [ i ] == 1 ) :\n            oneFound = True ;\n        while ( i < n and arr [ i ] == 1 ) :\n            i += 1 ;\n        count_zero = 0 ;\n        while ( i < n and arr [ i ] == 0 ) :\n            count_zero += 1 ;\n            i += 1 ;\n        if ( oneFound == False and i == n ) :\n            return - 1 ;\n        curr_count = 0 ;\n        if ( i < n and oneFound == True ) :\n            if ( ( count_zero & 1 ) == 0 ) :\n                curr_count = count_zero // 2 ;\n            else :\n                curr_count = ( count_zero + 1 ) // 2 ;\n            count_zero = 0 ;\n        else :\n            curr_count = count_zero ;\n            count_zero = 0 ;\n        res = max ( res , curr_count ) ;\n    return res ;\n"}
{"task_id": "Open/41", "problem_prompt": "def longestSubArray ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the length of the longest subarray that contains at least one zero.\n    If the array does not contain any zeros, the function should return 0.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def longestSubArray(arr, n):\n    max_length = 0\n    current_length = 0\n    has_zero = False\n    \n    for i in range(n):\n        if arr[i] == 0:\n            has_zero = True\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            if has_zero:\n                current_length += 1\n            else:\n                current_length = 0\n    \n    return max_length", "raw_completion": "```python\ndef longestSubArray(arr, n):\n    max_length = 0\n    current_length = 0\n    has_zero = False\n    \n    for i in range(n):\n        if arr[i] == 0:\n            has_zero = True\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            if has_zero:\n                current_length += 1\n            else:\n                current_length = 0\n    \n    return max_length\n```", "reference_code": "    isZeroPresent = False\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            isZeroPresent = True\n            break\n    if ( isZeroPresent ) :\n        return n\n    return 0\n"}
{"task_id": "Open/42", "problem_prompt": "def maxOfSegmentMins ( a , n , k ) :\n    \"\"\"Write a function that takes an array 'a', its length 'n', and an integer 'k' as input and returns the maximum value of the minimum elements in each segment of size 'k' in the array.\n    If 'k' is equal to 1, the function should return the minimum element in the array.\n    If 'k' is equal to 2, the function should return the maximum value between the first and last element in the array.\n    Otherwise, the function should return the maximum element in the array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def maxOfSegmentMins(a, n, k):\n    if k == 1:\n        return min(a)\n    elif k == 2:\n        return max(a[0], a[-1])\n    else:\n        return max(a)", "raw_completion": "```python\ndef maxOfSegmentMins(a, n, k):\n    if k == 1:\n        return min(a)\n    elif k == 2:\n        return max(a[0], a[-1])\n    else:\n        return max(a)\n```", "reference_code": "    if k == 1 :\n        return min ( a )\n    if k == 2 :\n        return max ( a [ 0 ] , a [ n - 1 ] )\n    return max ( a )\n"}
{"task_id": "Open/43", "problem_prompt": "def countsubarray ( array , n , k ) :\n    \"\"\"Write a function that takes an array, its length, and a number k as input and returns the count of subarrays whose product is less than or equal to k.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countsubarray(array, n, k):\n    count = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= array[j]\n            if prod <= k:\n                count += 1\n            else:\n                break\n    return count", "raw_completion": "```python\ndef countsubarray(array, n, k):\n    count = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= array[j]\n            if prod <= k:\n                count += 1\n            else:\n                break\n    return count\n```", "reference_code": "    count = 0\n    for i in range ( 0 , n ) :\n        if array [ i ] <= k :\n            count += 1\n        mul = array [ i ]\n        for j in range ( i + 1 , n ) :\n            mul = mul * array [ j ]\n            if mul <= k :\n                count += 1\n            else :\n                break\n    return count\n"}
{"task_id": "Open/44", "problem_prompt": "def make_permutation ( arr , n ) :\n    \"\"\"Write a function that takes an array and an integer as input and returns the sum of absolute differences between each element in the sorted array and its corresponding index plus one.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def make_permutation(arr, n):\n    arr.sort()\n    return sum(abs(x - (i + 1)) for i, x in enumerate(arr))", "raw_completion": "```python\ndef make_permutation(arr, n):\n    arr.sort()\n    return sum(abs(x - (i + 1)) for i, x in enumerate(arr))\n```", "reference_code": "    arr . sort ( ) ;\n    ans = 0 ;\n    for i in range ( n ) :\n        ans += abs ( i + 1 - arr [ i ] ) ;\n    return ans ;\n"}
{"task_id": "Open/45", "problem_prompt": "def getMinCost ( arr , n ) :\n    \"\"\"Write a function that takes an array of integers and the length of the array as input.\n    The function should find the minimum element in the array and return the product of the minimum element and (n - 1), where n is the length of the array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def getMinCost(arr, n):\n    min_element = min(arr)\n    return min_element * (n - 1)", "raw_completion": "```python\ndef getMinCost(arr, n):\n    min_element = min(arr)\n    return min_element * (n - 1)\n```", "reference_code": "    min_ele = min ( arr )\n    return min_ele * ( n - 1 )\n"}
{"task_id": "Open/46", "problem_prompt": "def maxDistance ( array ) :\n    \"\"\"Write a function that takes an array of integers and returns the maximum difference between any two elements in the array, where the difference is calculated by adding or subtracting the index of the element from the element itself.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def maxDistance(array):\n    min_val = float('inf')\n    max_diff = 0\n    for i, num in enumerate(array):\n        current_val = num + i\n        if current_val < min_val:\n            min_val = current_val\n        else:\n            max_diff = max(max_diff, current_val - min_val)\n    return max_diff", "raw_completion": "```python\ndef maxDistance(array):\n    min_val = float('inf')\n    max_diff = 0\n    for i, num in enumerate(array):\n        current_val = num + i\n        if current_val < min_val:\n            min_val = current_val\n        else:\n            max_diff = max(max_diff, current_val - min_val)\n    return max_diff\n```", "reference_code": "    max1 = - 2147483648\n    min1 = + 2147483647\n    max2 = - 2147483648\n    min2 = + 2147483647\n    for i in range ( len ( array ) ) :\n        max1 = max ( max1 , array [ i ] + i )\n        min1 = min ( min1 , array [ i ] + i )\n        max2 = max ( max2 , array [ i ] - i )\n        min2 = min ( min2 , array [ i ] - i )\n    return max ( max1 - min1 , max2 - min2 )\n"}
{"task_id": "Open/47", "problem_prompt": "def pointsAreOnSameSideOfLine ( a , b , c , x1 , y1 , x2 , y2 ) :\n    \"\"\"Write a function that takes in six parameters: a, b, c, x1, y1, x2, y2.\n    The function checks if two points (x1, y1) and (x2, y2) are on the same side of a line defined by the equation ax + by = c.\n    The function returns True if the points are on the same side and False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def pointsAreOnSameSideOfLine(a, b, c, x1, y1, x2, y2):\n    def sign(x, y):\n        return (a * x + b * y - c) > 0\n    \n    return sign(x1, y1) == sign(x2, y2)", "raw_completion": "```python\ndef pointsAreOnSameSideOfLine(a, b, c, x1, y1, x2, y2):\n    def sign(x, y):\n        return (a * x + b * y - c) > 0\n    \n    return sign(x1, y1) == sign(x2, y2)\n```", "reference_code": "    fx1 = 0\n    fx2 = 0\n    fx1 = a * x1 + b * y1 - c\n    fx2 = a * x2 + b * y2 - c\n    if ( ( fx1 * fx2 ) > 0 ) :\n        return True\n    return False\n"}
{"task_id": "Open/48", "problem_prompt": "def countSolutions ( a ) :\n    \"\"\"Write a function that takes an integer as input and counts the number of solutions to the equation a = i + (a XOR i), where i ranges from 0 to a (inclusive).\n    The function should return the count of solutions.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countSolutions(a):\n    count = 0\n    for i in range(a + 1):\n        if a == i + (a ^ i):\n            count += 1\n    return count", "raw_completion": "```python\ndef countSolutions(a):\n    count = 0\n    for i in range(a + 1):\n        if a == i + (a ^ i):\n            count += 1\n    return count\n```", "reference_code": "    count = 0\n    for i in range ( a + 1 ) :\n        if ( a == ( i + ( a ^ i ) ) ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/49", "problem_prompt": "def maxAND ( L , R ) :\n    \"\"\"Write a function that takes two integers, L and R, and returns the maximum value of the bitwise AND operation between L and R.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def maxAND(L, R):\n    return L & R", "raw_completion": "```python\ndef maxAND(L, R):\n    return L & R\n```", "reference_code": "    if ( L == R ) :\n        return L ;\n    elif ( ( R - L ) == 1 ) :\n        return ( R & L ) ;\n    else :\n        if ( ( ( R - 1 ) & R ) > ( ( R - 2 ) & ( R - 1 ) ) ) :\n            return ( ( R - 1 ) & R ) ;\n        else :\n            return ( ( R - 2 ) & ( R - 1 ) ) ;\n"}
{"task_id": "Open/50", "problem_prompt": "def findSmallest ( a , n ) :\n    \"\"\"Write a function that takes an array of integers and its length as input and returns the smallest number in the array that is a factor of all other numbers in the array.\n    If there is no such number, the function should return -1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findSmallest(a, n):\n    def gcd(x, y):\n        while y != 0:\n            (x, y) = (y, x % y)\n        return x\n\n    if n == 1:\n        return a[0]\n\n    current_gcd = a[0]\n    for i in range(1, n):\n        current_gcd = gcd(current_gcd, a[i])\n\n    for num in sorted(a):\n        if current_gcd % num == 0 and all(num % x == 0 for x in a if x != num):\n            return num\n\n    return -1", "raw_completion": "```python\ndef findSmallest(a, n):\n    def gcd(x, y):\n        while y != 0:\n            (x, y) = (y, x % y)\n        return x\n\n    if n == 1:\n        return a[0]\n\n    current_gcd = a[0]\n    for i in range(1, n):\n        current_gcd = gcd(current_gcd, a[i])\n\n    for num in sorted(a):\n        if current_gcd % num == 0 and all(num % x == 0 for x in a if x != num):\n            return num\n\n    return -1\n```", "reference_code": "    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( ( a [ j ] % a [ i ] ) >= 1 ) :\n                break\n            if ( j == n - 1 ) :\n                return a [ i ]\n        return - 1\n"}
{"task_id": "Open/51", "problem_prompt": "def sum ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the sum of the series 1/3^n for n terms.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += 1 / (3 ** i)\n    return total", "raw_completion": "```python\ndef sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += 1 / (3 ** i)\n    return total\n```", "reference_code": "    if n == 0 :\n        return 1\n    return 1 / pow ( 3 , n ) + sum ( n - 1 )\n"}
{"task_id": "Open/52", "problem_prompt": "def submatrixXor ( arr , n ) :\n    \"\"\"Write a function that takes a 2D array `arr` and an integer `n` as input and returns the XOR of all elements in the submatrices of size (i+1) x (j+1) where i and j range from 0 to n-1.\n    The XOR operation is performed only on the submatrices where the product of the top left element and the bottom right element is odd.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def submatrixXor(arr, n):\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] % 2 != 0:\n                for k in range(i, n):\n                    for l in range(j, n):\n                        if (arr[k][l] % 2 != 0) and ((i * j) % 2 == 1):\n                            result ^= arr[k][l]\n    return result", "raw_completion": "```python\ndef submatrixXor(arr, n):\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] % 2 != 0:\n                for k in range(i, n):\n                    for l in range(j, n):\n                        if (arr[k][l] % 2 != 0) and ((i * j) % 2 == 1):\n                            result ^= arr[k][l]\n    return result\n```", "reference_code": "    ans = 0\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            top_left = ( i + 1 ) * ( j + 1 )\n            bottom_right = ( n - i ) * ( n - j )\n            if ( top_left % 2 == 1 and bottom_right % 2 == 1 ) :\n                ans = ( ans ^ arr [ i ] [ j ] )\n    return ans\n"}
{"task_id": "Open/53", "problem_prompt": "def xorEqualsOrCount ( N ) :\n    \"\"\"Write a function that takes an integer N and returns the count of numbers from 0 to N (inclusive) where the bitwise XOR of the number with its own bitwise OR is equal to the number itself.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def xorEqualsOrCount(N):\n    count = 0\n    for i in range(N + 1):\n        if i ^ (i | 0) == i:\n            count += 1\n    return count", "raw_completion": "```python\ndef xorEqualsOrCount(N):\n    count = 0\n    for i in range(N + 1):\n        if i ^ (i | 0) == i:\n            count += 1\n    return count\n```", "reference_code": "    count = 0\n    while ( N > 0 ) :\n        bit = N % 2\n        if bit == 0 :\n            count += 1\n        N //= 2\n    return int ( pow ( 2 , count ) )\n"}
{"task_id": "Open/54", "problem_prompt": "def isUnique ( a , n , k ) :\n    \"\"\"Write a function that takes an array of integers, the length of the array, and an integer k.\n    The function should return True if the sum of the array elements plus the length of the array minus 1 is equal to k, and False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def isUnique(a, n, k):\n    return sum(a) + n - 1 == k", "raw_completion": "```python\ndef isUnique(a, n, k):\n    return sum(a) + n - 1 == k\n```", "reference_code": "    sum = 0\n    for i in range ( 0 , n , 1 ) :\n        sum += a [ i ]\n    sum += n - 1\n    return ( sum == k )\n"}
{"task_id": "Open/55", "problem_prompt": "def onlyFirstAndLastAreSet ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns True if only the first and last bits of the binary representation of the integer are set to 1, or False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def onlyFirstAndLastAreSet(n):\n    return (n & (n - 1)) == 0 and n != 0 and (n & 1) == 1", "raw_completion": "```python\ndef onlyFirstAndLastAreSet(n):\n    return (n & (n - 1)) == 0 and n != 0 and (n & 1) == 1\n```", "reference_code": "    if ( n == 1 ) :\n        return True\n    if ( n == 2 ) :\n        return False\n    return ( ( ( n - 1 ) & ( n - 2 ) ) == 0 )\n"}
{"task_id": "Open/56", "problem_prompt": "def maxPartition ( s ) :\n    \"\"\"Write a function that takes a string as input and returns the maximum number of partitions that can be made such that each partition consists of consecutive identical characters.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def maxPartition(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        j = i + 1\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        count += 1\n        i = j\n    return count", "raw_completion": "```python\ndef maxPartition(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        j = i + 1\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        count += 1\n        i = j\n    return count\n```", "reference_code": "    n = len ( s )\n    P = 0\n    current = \"\"\n    previous = \"\"\n    for i in range ( n ) :\n        current += s [ i ]\n        if ( current != previous ) :\n            previous = current\n            current = \"\"\n            P += 1\n    return P\n"}
{"task_id": "Open/57", "problem_prompt": "def findNum ( N , K ) :\n    \"\"\"Write a function that takes two integers, N and K, and returns N if N is divisible by K, otherwise it returns N minus the remainder of N divided by K.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findNum(N, K):\n    return N if N % K == 0 else N - (N % K)", "raw_completion": "```python\ndef findNum(N, K):\n    return N if N % K == 0 else N - (N % K)\n```", "reference_code": "    rem = N % K\n    if ( rem == 0 ) :\n        return N\n    else :\n        return N - rem\n"}
{"task_id": "Open/58", "problem_prompt": "def successiveChange ( arr , N ) :\n    \"\"\"Write a function that takes an array and an integer N as input and returns the result of a successive change calculation.\n    The function initializes a variable \"result\" to 0.\n    It then assigns the first element of the array to a variable \"var1\" and the second element to a variable \"var2\".\n    The \"result\" variable is updated by adding \"var1\" and \"var2\" and adding the product of \"var1\" and \"var2\" divided by 100.\n    \n\nThe function then enters a loop that iterates from 2 to N.\n    In each iteration, the \"result\" variable is updated by adding the current element of the array and adding the product of \"result\" and the current element divided by 100.\n    \n\nFinally, the function returns the final value of the \"result\" variable.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def successiveChange(arr, N):\n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result += var1 + var2 + (var1 * var2) / 100\n    \n    for i in range(2, N):\n        result += arr[i] + (result * arr[i]) / 100\n    \n    return result", "raw_completion": "```python\ndef successiveChange(arr, N):\n    result = 0\n    var1 = arr[0]\n    var2 = arr[1]\n    result += var1 + var2 + (var1 * var2) / 100\n    \n    for i in range(2, N):\n        result += arr[i] + (result * arr[i]) / 100\n    \n    return result\n```", "reference_code": "    result = 0 ;\n    var1 = arr [ 0 ] ;\n    var2 = arr [ 1 ] ;\n    result = float ( var1 + var2 + ( float ( var1 * var2 ) / 100 ) ) ;\n    for i in range ( 2 , N ) :\n        result = ( result + arr [ i ] + ( float ( result * arr [ i ] ) / 100 ) ) ;\n    return result ;\n"}
{"task_id": "Open/59", "problem_prompt": "def answer ( arr , ranges , reversals , index ) :\n    \"\"\"Write a function that takes in four parameters: an array, a list of ranges, the number of reversals, and an index.\n    The function returns the value at the given index after performing the specified number of reversals on the array.\n    Each reversal involves swapping the elements within a given range.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def answer(arr, ranges, reversals, index):\n    for _ in range(reversals):\n        start, end = ranges[_]\n        arr[start:end+1] = reversed(arr[start:end+1])\n    return arr[index]", "raw_completion": "```python\ndef answer(arr, ranges, reversals, index):\n    for _ in range(reversals):\n        start, end = ranges[_]\n        arr[start:end+1] = reversed(arr[start:end+1])\n    return arr[index]\n```", "reference_code": "    i = reversals - 1\n    while ( i >= 0 ) :\n        left = ranges [ i ] [ 0 ]\n        right = ranges [ i ] [ 1 ]\n        if ( left <= index and right >= index ) :\n            index = right + left - index\n        i -= 1\n    return arr [ index ]\n"}
{"task_id": "Open/60", "problem_prompt": "def judgeSquareSum ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns True if the integer can be expressed as the sum of two squares, and False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def judgeSquareSum(n):\n    i = 0\n    while i * i <= n:\n        j = int((n - i * i) ** 0.5)\n        if i * i + j * j == n:\n            return True\n        i += 1\n    return False", "raw_completion": "```python\ndef judgeSquareSum(n):\n    i = 0\n    while i * i <= n:\n        j = int((n - i * i) ** 0.5)\n        if i * i + j * j == n:\n            return True\n        i += 1\n    return False\n```", "reference_code": "    i = 2 ;\n    while ( i * i <= n ) :\n        count = 0 ;\n        if ( n % i == 0 ) :\n            while ( n % i == 0 ) :\n                count += 1 ;\n                n = int ( n / i ) ;\n            if ( i % 4 == 3 and count % 2 != 0 ) :\n                return False ;\n        i += 1 ;\n    return n % 4 != 3 ;\n"}
{"task_id": "Open/61", "problem_prompt": "def getCount ( a , b ) :\n    \"\"\"Write a function that takes two strings, `a` and `b`, and returns the number of times `a` can be repeated to form `b`.\n    If `a` cannot be repeated to form `b`, the function should return -1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def getCount(a, b):\n    if len(b) % len(a) != 0:\n        return -1\n    count = len(b) // len(a)\n    return count if a * count == b else -1", "raw_completion": "```python\ndef getCount(a, b):\n    if len(b) % len(a) != 0:\n        return -1\n    count = len(b) // len(a)\n    return count if a * count == b else -1\n```", "reference_code": "    if ( len ( b ) % len ( a ) != 0 ) :\n        return - 1 ;\n    count = int ( len ( b ) / len ( a ) )\n    a = a * count\n    if ( a == b ) :\n        return count\n    return - 1 ;\n"}
{"task_id": "Open/62", "problem_prompt": "def tidyNum ( str , len ) :\n    \"\"\"Write a function that takes a string and its length as input and returns a modified string.\n    The function iterates through the string from the second-to-last character to the first character.\n    If a character is greater than the next character, it subtracts 1 from that character and sets all subsequent characters to 9.\n    The modified string is then returned.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def tidyNum(str, len):\n    for i in range(len-2, -1, -1):\n        if str[i] > str[i+1]:\n            str = str[:i] + chr(ord(str[i]) - 1) + '9' * (len - i - 1)\n            break\n    return str", "raw_completion": "```python\ndef tidyNum(str, len):\n    for i in range(len-2, -1, -1):\n        if str[i] > str[i+1]:\n            str = str[:i] + chr(ord(str[i]) - 1) + '9' * (len - i - 1)\n            break\n    return str\n```", "reference_code": "    for i in range ( len - 2 , - 1 , - 1 ) :\n        if ( str [ i ] > str [ i + 1 ] ) :\n            str [ i ] -= 1\n            for j in range ( i + 1 , len ) :\n                str [ j ] = 9\n    return str\n"}
{"task_id": "Open/63", "problem_prompt": "import math\n\ndef findMinValue ( arr , n ) :\n    \"\"\"Write a function that takes an array of numbers and its length as input and returns the minimum value of a number such that the sum of the logarithms of all the numbers in the array is less than the logarithm of the minimum value multiplied by the length of the array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef findMinValue(arr, n):\n    total_log = sum(math.log(x) for x in arr)\n    min_val = math.exp(total_log / n)\n    return min_val", "raw_completion": "```python\nimport math\n\ndef findMinValue(arr, n):\n    total_log = sum(math.log(x) for x in arr)\n    min_val = math.exp(total_log / n)\n    return min_val\n```", "reference_code": "    arr . sort ( )\n    val = 0\n    for i in range ( n ) :\n        val += ( math . log ( arr [ i ] ) )\n    left = arr [ 0 ]\n    right = arr [ n - 1 ] + 1\n    while ( left <= right ) :\n        mid = ( left + right ) // 2\n        temp = n * ( math . log ( mid ) )\n        if ( val < temp ) :\n            ans = mid\n            right = mid - 1\n        else :\n            left = mid + 1\n    return ans\n"}
{"task_id": "Open/64", "problem_prompt": "def largestSubStr ( s ) :\n    \"\"\"Write a function that takes a string as input and returns the largest substring of the input string that does not end with the character '1'.\n    If the input string is empty or consists only of '1' characters, the function should return \"-1\".\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def largestSubStr(s):\n    if not s or all(c == '1' for c in s):\n        return \"-1\"\n    max_length = 0\n    end_index = -1\n    for i, char in enumerate(s):\n        if char != '1':\n            if i - end_index > max_length:\n                max_length = i - end_index\n                end_index = i\n    return s[:end_index + max_length]", "raw_completion": "```python\ndef largestSubStr(s):\n    if not s or all(c == '1' for c in s):\n        return \"-1\"\n    max_length = 0\n    end_index = -1\n    for i, char in enumerate(s):\n        if char != '1':\n            if i - end_index > max_length:\n                max_length = i - end_index\n                end_index = i\n    return s[:end_index + max_length]\n```", "reference_code": "    while ( len ( s ) and s [ len ( s ) - 1 ] == '1' ) :\n        s = s [ : len ( s ) - 1 ] ;\n    if ( len ( s ) == 0 ) :\n        return \"-1\" ;\n    else :\n        return s ;\n"}
{"task_id": "Open/65", "problem_prompt": "def MinRemove ( a , n , k ) :\n    \"\"\"Write a function that takes an array 'a', its length 'n', and an integer 'k' as input.\n    The function removes the minimum number of elements from the array such that the count of each element is at most 'k'.\n    The function returns the length of the modified array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def MinRemove(a, n, k):\n    from collections import Counter\n    freq = Counter(a)\n    removed = 0\n    for count in freq.values():\n        if count > k:\n            removed += count - k\n    return n - removed", "raw_completion": "```python\ndef MinRemove(a, n, k):\n    from collections import Counter\n    freq = Counter(a)\n    removed = 0\n    for count in freq.values():\n        if count > k:\n            removed += count - k\n    return n - removed\n```", "reference_code": "    cnt = [ 0 ] * k\n    for i in range ( n ) :\n        if ( a [ i ] == 0 ) :\n            cnt [ 0 ] += 1 ;\n        elif ( cnt [ a [ i ] - 1 ] > 0 ) :\n            cnt [ a [ i ] - 1 ] -= 1 ;\n            cnt [ a [ i ] ] += 1 ;\n    return n - ( k * cnt [ k - 1 ] ) ;\n"}
{"task_id": "Open/66", "problem_prompt": "def getMaxMedian ( arr , n , k ) :\n    \"\"\"Write a function that takes an array, its size, and an integer k as input and returns the maximum median of the array after adding k elements to it.\n    The function first calculates the size of the array after adding k elements.\n    It then sorts the array in ascending order.\n    If the size is even, the function calculates the median by taking the average of the two middle elements.\n    If the size is odd, the function simply returns the middle element as the median.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def getMaxMedian(arr, n, k):\n    arr.extend([0] * k)\n    arr.sort()\n    size = n + k\n    if size % 2 == 0:\n        return (arr[size // 2 - 1] + arr[size // 2]) / 2.0\n    else:\n        return arr[size // 2]", "raw_completion": "```python\ndef getMaxMedian(arr, n, k):\n    arr.extend([0] * k)\n    arr.sort()\n    size = n + k\n    if size % 2 == 0:\n        return (arr[size // 2 - 1] + arr[size // 2]) / 2.0\n    else:\n        return arr[size // 2]\n```", "reference_code": "    size = n + k\n    arr . sort ( reverse = False )\n    if ( size % 2 == 0 ) :\n        median = ( arr [ int ( size / 2 ) - 1 ] + arr [ int ( size / 2 ) ] ) / 2\n        return median\n    median = arr [ int ( size / 2 ) ]\n    return median\n"}
{"task_id": "Open/67", "problem_prompt": "def MinStep ( a , n ) :\n    \"\"\"Write a function that takes an array of integers and its length as input and returns the minimum number of steps required to make all the elements of the array equal to either 1 or -1.\n    The function calculates the number of positive, negative, and zero elements in the array.\n    For each negative element, the function adds the absolute difference between the element and -1 to the step count.\n    For each positive element, the function adds the absolute difference between the element and 1 to the step count.\n    If the number of negative elements is even, the function adds the number of zero elements to the step count.\n    If the number of negative elements is odd, the function checks if there are any zero elements.\n    If there are zero elements, it adds the number of zero elements to the step count.\n    If there are no zero elements, it adds 2 to the step count.\n    Finally, the function returns the total step count.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def MinStep(a, n):\n    pos = neg = zero = 0\n    for i in range(n):\n        if a[i] > 0:\n            pos += abs(a[i] - 1)\n        elif a[i] < 0:\n            neg += abs(a[i] + 1)\n        else:\n            zero += 1\n    if neg % 2 == 0:\n        return neg + zero\n    else:\n        if zero > 0:\n            return neg + zero\n        else:\n            return neg + 2", "raw_completion": "```python\ndef MinStep(a, n):\n    pos = neg = zero = 0\n    for i in range(n):\n        if a[i] > 0:\n            pos += abs(a[i] - 1)\n        elif a[i] < 0:\n            neg += abs(a[i] + 1)\n        else:\n            zero += 1\n    if neg % 2 == 0:\n        return neg + zero\n    else:\n        if zero > 0:\n            return neg + zero\n        else:\n            return neg + 2\n```", "reference_code": "    positive = 0 ;\n    negative = 0 ;\n    zero = 0 ;\n    step = 0 ;\n    for i in range ( n ) :\n        if ( a [ i ] == 0 ) :\n            zero += 1 ;\n        elif ( a [ i ] < 0 ) :\n            negative += 1 ;\n            step = step + ( - 1 - a [ i ] ) ;\n        else :\n            positive += 1 ;\n            step = step + ( a [ i ] - 1 ) ;\n    if ( negative % 2 == 0 ) :\n        step = step + zero ;\n    else :\n        if ( zero > 0 ) :\n            step = step + zero ;\n        else :\n            step = step + 2 ;\n    return step ;\n"}
{"task_id": "Open/68", "problem_prompt": "def findNthEvenDigitNumber ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth even digit number.\n    The function first checks if n is equal to 1, in which case it returns 0.\n    Otherwise, it creates an empty list v and subtracts 1 from n.\n    It then enters a while loop where it appends the remainder of n divided by 5 to the list v and updates n to be the floor division of n by 5.\n    After the loop, the function initializes a variable result to 0.\n    It then iterates over the elements in the list v in reverse order and updates the result by multiplying it by 10 and adding the current element.\n    Finally, the function returns 2 times the result.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findNthEvenDigitNumber(n):\n    if n == 1:\n        return 0\n    v = []\n    n -= 1\n    while n > 0:\n        v.append(n % 5)\n        n //= 5\n    result = 0\n    for digit in reversed(v):\n        result = result * 10 + digit\n    return 2 * result", "raw_completion": "```python\ndef findNthEvenDigitNumber(n):\n    if n == 1:\n        return 0\n    v = []\n    n -= 1\n    while n > 0:\n        v.append(n % 5)\n        n //= 5\n    result = 0\n    for digit in reversed(v):\n        result = result * 10 + digit\n    return 2 * result\n```", "reference_code": "    if ( n == 1 ) :\n        return 0\n    v = [ ]\n    n = n - 1\n    while ( n > 0 ) :\n        v . append ( n % 5 )\n        n = n // 5\n    result = 0\n    for i in range ( len ( v ) - 1 , - 1 , - 1 ) :\n        result = result * 10\n        result = result + v [ i ]\n    return 2 * result\n"}
{"task_id": "Open/69", "problem_prompt": "import sys\n\ndef areSetBitsIncreasing ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns True if the number has a sequence of increasing set bits (bits that are set to 1) and False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def areSetBitsIncreasing(n):\n    while n > 0:\n        if n & 1 == 0:\n            return False\n        n >>= 1\n    return True", "raw_completion": "```python\ndef areSetBitsIncreasing(n):\n    while n > 0:\n        if n & 1 == 0:\n            return False\n        n >>= 1\n    return True\n```", "reference_code": "    prev_count = sys . maxsize\n    while ( n > 0 ) :\n        while ( n > 0 and n % 2 == 0 ) :\n            n = int ( n / 2 )\n        curr_count = 1\n        while ( n > 0 and n % 2 == 1 ) :\n            n = n / 2\n            curr_count += 1\n        if ( curr_count >= prev_count ) :\n            return False\n        prev_count = curr_count\n    return True\n"}
{"task_id": "Open/70", "problem_prompt": "def closestMultiple ( n , x ) :\n    \"\"\"Write a function that takes two integers, n and x, and returns the closest multiple of x to n.\n    If x is greater than n, it returns x.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def closestMultiple(n, x):\n    if x > n:\n        return x\n    lower_multiple = (n // x) * x\n    upper_multiple = lower_multiple + x\n    return upper_multiple if n - lower_multiple >= upper_multiple - n else lower_multiple", "raw_completion": "```python\ndef closestMultiple(n, x):\n    if x > n:\n        return x\n    lower_multiple = (n // x) * x\n    upper_multiple = lower_multiple + x\n    return upper_multiple if n - lower_multiple >= upper_multiple - n else lower_multiple\n```", "reference_code": "    if x > n :\n        return x ;\n    z = ( int ) ( x / 2 ) ;\n    n = n + z ;\n    n = n - ( n % x ) ;\n    return n ;\n"}
{"task_id": "Open/71", "problem_prompt": "def sumOfTheSeries ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the sum of a series.\n    The series is generated by starting with 0 and adding 2 to each subsequent number in the series.\n    The series should include all numbers from 0 to n (inclusive).\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def sumOfTheSeries(n):\n    return sum(range(0, n + 1, 2))", "raw_completion": "```python\ndef sumOfTheSeries(n):\n    return sum(range(0, n + 1, 2))\n```", "reference_code": "    sum = 0\n    for i in range ( 0 , n + 1 ) :\n        k = 2\n        for j in range ( 1 , i + 1 ) :\n            sum = sum + k ;\n            k = k + 2\n    return sum ;\n"}
{"task_id": "Open/72", "problem_prompt": "def sumOfTheSeries ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the sum of a series.\n    The series is calculated as follows: for each number i from 1 to n, a new series is generated.\n    In this new series, the first term is 1 and each subsequent term is obtained by adding 2 to the previous term.\n    The sum of all the terms in each series is then added together to get the final sum.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def sumOfTheSeries(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        current_series_sum = 0\n        term = 1\n        for j in range(i):\n            current_series_sum += term\n            term += 2\n        total_sum += current_series_sum\n    return total_sum", "raw_completion": "```python\ndef sumOfTheSeries(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        current_series_sum = 0\n        term = 1\n        for j in range(i):\n            current_series_sum += term\n            term += 2\n        total_sum += current_series_sum\n    return total_sum\n```", "reference_code": "    sum = 0\n    for i in range ( 1 , n + 1 ) :\n        k = 1\n        for j in range ( 1 , i + 1 ) :\n            sum += k\n            k += 2\n    return sum\n"}
{"task_id": "Open/73", "problem_prompt": "def find_maxm ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the maximum value in the array that occurs the same number of times as its value.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def find_maxm(arr, n):\n    from collections import Counter\n    \n    count = Counter(arr)\n    max_val = -1\n    \n    for num, freq in count.items():\n        if num == freq and num > max_val:\n            max_val = num\n            \n    return max_val", "raw_completion": "```python\ndef find_maxm(arr, n):\n    from collections import Counter\n    \n    count = Counter(arr)\n    max_val = -1\n    \n    for num, freq in count.items():\n        if num == freq and num > max_val:\n            max_val = num\n            \n    return max_val\n```", "reference_code": "    mpp = { }\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] in mpp ) :\n            mpp . update ( { arr [ i ] : mpp [ arr [ i ] ] + 1 } )\n        else :\n            mpp [ arr [ i ] ] = 1\n    ans = 0\n    for value , freq in mpp . items ( ) :\n        if ( value == freq ) :\n            ans = max ( ans , value )\n    return ans\n"}
{"task_id": "Open/74", "problem_prompt": "def countPairs ( a , n ) :\n    \"\"\"Write a function that takes a list of integers and the length of the list as input.\n    The function counts the number of pairs of integers in the list where one integer is the power of 2 greater than the other integer.\n    The function returns the count of such pairs.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countPairs(a, n):\n    def is_power_of_two(x):\n        return (x != 0) and (x & (x - 1)) == 0\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_power_of_two(abs(a[i] / a[j])) or is_power_of_two(abs(a[j] / a[i])):\n                count += 1\n    return count", "raw_completion": "```python\ndef countPairs(a, n):\n    def is_power_of_two(x):\n        return (x != 0) and (x & (x - 1)) == 0\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_power_of_two(abs(a[i] / a[j])) or is_power_of_two(abs(a[j] / a[i])):\n                count += 1\n    return count\n```", "reference_code": "    mp = dict . fromkeys ( a , 0 )\n    for i in range ( n ) :\n        mp [ a [ i ] ] += 1\n    a . sort ( reverse = True )\n    count = 0\n    for i in range ( n ) :\n        if ( mp [ a [ i ] ] < 1 ) :\n            continue\n        cur = 1\n        while ( cur <= a [ i ] ) :\n            cur = cur << 1\n        if ( cur - a [ i ] in mp . keys ( ) ) :\n            if ( cur - a [ i ] == a [ i ] and mp [ a [ i ] ] == 1 ) :\n                continue\n            count += 1\n            mp [ cur - a [ i ] ] -= 1\n            mp [ a [ i ] ] -= 1\n    return count\n"}
{"task_id": "Open/75", "problem_prompt": "def toggle ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the result of toggling all the bits in the binary representation of the integer.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def toggle(n):\n    return n ^ ((1 << n.bit_length()) - 1)", "raw_completion": "```python\ndef toggle(n):\n    return n ^ ((1 << n.bit_length()) - 1)\n```", "reference_code": "    temp = 1\n    while ( temp <= n ) :\n        n = n ^ temp\n        temp = temp << 1\n    return n\n"}
{"task_id": "Open/76", "problem_prompt": "def minChanges ( A , n ) :\n    \"\"\"Write a function that takes a list A and an integer n as input and returns the minimum number of changes needed in the list A to satisfy the following condition: if A[i-1] = 1, A[i+1] = 1, and A[i] = 0, then A[i+1] should be changed to 0.\n    The function should return the total number of changes made.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def minChanges(A, n):\n    changes = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i] == 0 and A[i+1] == 1:\n            A[i+1] = 0\n            changes += 1\n    return changes", "raw_completion": "```python\ndef minChanges(A, n):\n    changes = 0\n    for i in range(1, n-1):\n        if A[i-1] == 1 and A[i] == 0 and A[i+1] == 1:\n            A[i+1] = 0\n            changes += 1\n    return changes\n```", "reference_code": "    cnt = 0\n    for i in range ( n - 2 ) :\n        if ( ( i - 1 >= 0 ) and A [ i - 1 ] == 1 and A [ i + 1 ] == 1 and A [ i ] == 0 ) :\n            A [ i + 1 ] = 0\n            cnt = cnt + 1\n    return cnt\n"}
{"task_id": "Open/77", "problem_prompt": "def Convert ( radian ) :\n    \"\"\"Write a function that takes a radian value as input and converts it to degrees.\n    The function should return the degree value.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef Convert(radian):\n    \"\"\"Converts a radian value to degrees.\"\"\"\n    return radian * (180 / math.pi)", "raw_completion": "```python\nimport math\n\ndef Convert(radian):\n    \"\"\"Converts a radian value to degrees.\"\"\"\n    return radian * (180 / math.pi)\n```", "reference_code": "    pi = 3.14159\n    degree = radian * ( 180 / pi )\n    return degree\n"}
{"task_id": "Open/78", "problem_prompt": "import math\n\ndef edgeDisjoint ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the floor division of that number by 2.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef edgeDisjoint(n):\n    return n // 2", "raw_completion": "```python\nimport math\n\ndef edgeDisjoint(n):\n    return n // 2\n```", "reference_code": "    result = 0\n    result = math . floor ( n / 2 )\n    return result\n"}
{"task_id": "Open/79", "problem_prompt": "def sumOfAP ( a , d , n ) :\n    \"\"\"Write a function that takes three parameters: `a` (the first term of an arithmetic progression), `d` (the common difference), and `n` (the number of terms).\n    The function calculates and returns the sum of the arithmetic progression.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def sumOfAP(a, d, n):\n    return (n * (2 * a + (n - 1) * d)) // 2", "raw_completion": "```python\ndef sumOfAP(a, d, n):\n    return (n * (2 * a + (n - 1) * d)) // 2\n```", "reference_code": "    sum = 0\n    i = 0\n    while i < n :\n        sum = sum + a\n        a = a + d\n        i = i + 1\n    return sum\n"}
{"task_id": "Open/80", "problem_prompt": "def makeOdd ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the largest power of 2 that divides the input number.\n    If the input number is odd, the function should return 1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def makeOdd(n):\n    while n % 2 == 0:\n        n //= 2\n    return n if n != 0 else 1", "raw_completion": "```python\ndef makeOdd(n):\n    while n % 2 == 0:\n        n //= 2\n    return n if n != 0 else 1\n```", "reference_code": "    if ( n % 2 != 0 ) :\n        return 1 ;\n    resul = 1 ;\n    while ( n % 2 == 0 ) :\n        n = n / 2 ;\n        resul = resul * 2 ;\n    return resul ;\n"}
{"task_id": "Open/81", "problem_prompt": "def Square ( row , column , moves ) :\n    \"\"\"Write a function that takes three parameters: `row`, `column`, and `moves`.\n    The function calculates the number of squares that can be reached by moving `moves` steps in any direction (up, down, left, right) from the given `row` and `column` position on an 8x8 chessboard.\n    The function returns the total number of squares that can be reached, excluding the starting position.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def Square(row, column, moves):\n    if row < 0 or row > 7 or column < 0 or column > 7:\n        return 0\n    if moves == 0:\n        return 0\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    count = 0\n    for dr, dc in directions:\n        new_row, new_column = row + dr * moves, column + dc * moves\n        if 0 <= new_row < 8 and 0 <= new_column < 8:\n            count += 1\n    return count", "raw_completion": "```python\ndef Square(row, column, moves):\n    if row < 0 or row > 7 or column < 0 or column > 7:\n        return 0\n    if moves == 0:\n        return 0\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    count = 0\n    for dr, dc in directions:\n        new_row, new_column = row + dr * moves, column + dc * moves\n        if 0 <= new_row < 8 and 0 <= new_column < 8:\n            count += 1\n    return count\n```", "reference_code": "    a = 0 ; b = 0 ; c = 0 ;\n    d = 0 ; total = 0 ;\n    a = row - moves ;\n    b = row + moves ;\n    c = column - moves ;\n    d = column + moves ;\n    if ( a < 1 ) :\n        a = 1 ;\n    if ( c < 1 ) :\n        c = 1 ;\n    if ( b > 8 ) :\n        b = 8 ;\n    if ( d > 8 ) :\n        d = 8 ;\n    total = ( b - a + 1 ) * ( d - c + 1 ) - 1 ;\n    return total ;\n"}
{"task_id": "Open/82", "problem_prompt": "def findNumber ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the next number in a sequence where each number is the sum of the previous number and the current index.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findNumber(n):\n    return n + len(str(n))", "raw_completion": "```python\ndef findNumber(n):\n    return n + len(str(n))\n```", "reference_code": "    n -= 1\n    i = 1\n    while n >= 0 :\n        n -= i\n        i += 1\n    return ( n + i )\n"}
{"task_id": "Open/83", "problem_prompt": "def findSmallest ( s ) :\n    \"\"\"Write a function that takes a string as input and returns the string with the smallest lexicographically possible permutation.\n    The function first finds the last occurrence of each character in the string and stores it in a list.\n    Then, it sorts the string and compares each character with its corresponding character in the sorted string.\n    If a character is not in the correct position, the function swaps it with the character at its last occurrence.\n    Finally, the function returns the modified string.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findSmallest(s):\n    from collections import defaultdict\n    \n    # Find the last occurrence of each character\n    last_occurrence = defaultdict(int)\n    for i in range(len(s)):\n        last_occurrence[s[i]] = i\n    \n    # Sort the string\n    sorted_s = sorted(s)\n    \n    # Create a list to store the result\n    result = list(s)\n    \n    # Iterate through the original string and swap characters if necessary\n    for i in range(len(s)):\n        if s[i] != sorted_s[i]:\n            j = last_occurrence[sorted_s[i]]\n            while j > i:\n                if result[j-1] == sorted_s[i]:\n                    break\n                j -= 1\n            result[i], result[j] = result[j], result[i]\n            # Update the last occurrence of the swapped character\n            last_occurrence[result[i]] = i\n    \n    return ''.join(result)", "raw_completion": "```python\ndef findSmallest(s):\n    from collections import defaultdict\n    \n    # Find the last occurrence of each character\n    last_occurrence = defaultdict(int)\n    for i in range(len(s)):\n        last_occurrence[s[i]] = i\n    \n    # Sort the string\n    sorted_s = sorted(s)\n    \n    # Create a list to store the result\n    result = list(s)\n    \n    # Iterate through the original string and swap characters if necessary\n    for i in range(len(s)):\n        if s[i] != sorted_s[i]:\n            j = last_occurrence[sorted_s[i]]\n            while j > i:\n                if result[j-1] == sorted_s[i]:\n                    break\n                j -= 1\n            result[i], result[j] = result[j], result[i]\n            # Update the last occurrence of the swapped character\n            last_occurrence[result[i]] = i\n    \n    return ''.join(result)\n```", "reference_code": "    length = len ( s ) ;\n    loccur = [ - 1 ] * 26 ;\n    for i in range ( length - 1 , - 1 , - 1 ) :\n        chI = ord ( s [ i ] ) - ord ( 'a' ) ;\n        if ( loccur [ chI ] == - 1 ) :\n            loccur [ chI ] = i ;\n    sorted_s = s ;\n    sorted_s . sort ( ) ;\n    for i in range ( length ) :\n        if ( s [ i ] != sorted_s [ i ] ) :\n            chI = ord ( sorted_s [ i ] ) - ord ( 'a' ) ;\n            last_occ = loccur [ chI ] ;\n            s [ i ] , s [ last_occ ] = s [ last_occ ] , s [ i ]\n            break ;\n    return \"\" . join ( s ) ;\n"}
{"task_id": "Open/84", "problem_prompt": "def rangesum ( n , l , r ) :\n    \"\"\"Write a function that takes three parameters: n, l, and r.\n    The function creates an array of length n and fills it with consecutive odd numbers followed by consecutive even numbers.\n    It then calculates the sum of the elements in the array from index l-1 to index r and returns the sum.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def rangesum(n, l, r):\n    arr = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            arr.append(i * 2)\n        else:\n            arr.append(i * 2 - 1)\n    return sum(arr[l-1:r])", "raw_completion": "```python\ndef rangesum(n, l, r):\n    arr = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            arr.append(i * 2)\n        else:\n            arr.append(i * 2 - 1)\n    return sum(arr[l-1:r])\n```", "reference_code": "    arr = [ 0 ] * n ;\n    c = 1 ; i = 0 ;\n    while ( c <= n ) :\n        arr [ i ] = c ;\n        i += 1 ;\n        c += 2 ;\n    c = 2 ;\n    while ( c <= n ) :\n        arr [ i ] = c ;\n        i += 1 ;\n        c += 2 ;\n    sum = 0 ;\n    for i in range ( l - 1 , r , 1 ) :\n        sum += arr [ i ] ;\n    return sum ;\n"}
{"task_id": "Open/85", "problem_prompt": "def getHCF ( x , y ) :\n    \"\"\"Write a function that takes two integers, x and y, and returns their highest common factor (HCF).\n    The function first finds the minimum of x and y.\n    If both x and y are divisible by the minimum, the function returns the minimum as the HCF.\n    Otherwise, the function iterates from the minimum divided by 2 to 1, checking if both x and y are divisible by the current number.\n    If a common factor is found, the function returns that number as the HCF.\n    If no common factor is found, the function returns 1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def getHCF(x, y):\n    min_val = min(x, y)\n    for i in range(min_val // 2, 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\n    return 1", "raw_completion": "```python\ndef getHCF(x, y):\n    min_val = min(x, y)\n    for i in range(min_val // 2, 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\n    return 1\n```", "reference_code": "    minimum = min ( x , y )\n    if ( x % minimum == 0 and y % minimum == 0 ) :\n        return minimum\n    for i in range ( minimum // 2 , 1 , - 1 ) :\n        if ( x % i == 0 and y % i == 0 ) :\n            return i\n    return 1\n"}
{"task_id": "Open/86", "problem_prompt": "def findNthNumber ( A , B , N ) :\n    \"\"\"Write a function that takes three parameters A, B, and N and returns the Nth number in a sequence.\n    The sequence starts with A and B, and each subsequent number is the sum of the previous two numbers.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findNthNumber(A, B, N):\n    if N == 1:\n        return A\n    elif N == 2:\n        return B\n    else:\n        a, b = A, B\n        for _ in range(3, N + 1):\n            a, b = b, a + b\n        return b", "raw_completion": "```python\ndef findNthNumber(A, B, N):\n    if N == 1:\n        return A\n    elif N == 2:\n        return B\n    else:\n        a, b = A, B\n        for _ in range(3, N + 1):\n            a, b = b, a + b\n        return b\n```", "reference_code": "    sum = 0\n    for i in range ( 2 , N ) :\n        sum = A + B\n        A = B\n        B = sum\n    return sum\n"}
{"task_id": "Open/87", "problem_prompt": "def findOccurrences ( str , substr ) :\n    \"\"\"Write a function that takes two strings, `str` and `substr`, and returns the number of times `substr` appears in `str`.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findOccurrences(str, substr):\n    return str.count(substr)", "raw_completion": "```python\ndef findOccurrences(str, substr):\n    return str.count(substr)\n```", "reference_code": "    counter = 0\n    for i in range ( 0 , len ( str ) ) :\n        if ( str [ i ] == substr [ 0 ] ) :\n            for j in range ( i + 1 , len ( str ) ) :\n                if ( str [ j ] == substr [ 1 ] ) :\n                    for k in range ( j + 1 , len ( str ) ) :\n                        if ( str [ k ] == substr [ 2 ] ) :\n                            counter = counter + 1\n    return counter\n"}
{"task_id": "Open/88", "problem_prompt": "def emi_calculator ( p , r , t ) :\n    \"\"\"Write a function that calculates the equated monthly installment (EMI) for a loan.\n    The function takes three parameters: the principal amount (p), the annual interest rate (r), and the loan tenure in years (t).\n    The function first converts the annual interest rate to a monthly interest rate by dividing it by 12 and 100.\n    It then converts the loan tenure from years to months by multiplying it by 12.\n    The EMI is calculated using the formula: EMI = (p * r * (1 + r)^t) / ((1 + r)^t - 1).\n    Finally, the function returns the calculated EMI.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def emi_calculator(p, r, t):\n    monthly_rate = r / (12 * 100)\n    tenure_months = t * 12\n    emi = (p * monthly_rate * (1 + monthly_rate) ** tenure_months) / ((1 + monthly_rate) ** tenure_months - 1)\n    return emi", "raw_completion": "```python\ndef emi_calculator(p, r, t):\n    monthly_rate = r / (12 * 100)\n    tenure_months = t * 12\n    emi = (p * monthly_rate * (1 + monthly_rate) ** tenure_months) / ((1 + monthly_rate) ** tenure_months - 1)\n    return emi\n```", "reference_code": "    r = r / ( 12 * 100 )\n    t = t * 12\n    emi = ( p * r * pow ( 1 + r , t ) ) / ( pow ( 1 + r , t ) - 1 )\n    return emi\n"}
{"task_id": "Open/89", "problem_prompt": "def countTriplets ( A , B , C ) :\n    \"\"\"Write a function that takes three integers A, B, and C as input and returns the number of triplets (i, j, k) that satisfy the condition i * k > j * j.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countTriplets(A, B, C):\n    return (A - 1) * (B - 1) * (C - 1)", "raw_completion": "```python\ndef countTriplets(A, B, C):\n    return (A - 1) * (B - 1) * (C - 1)\n```", "reference_code": "    ans = 0\n    for i in range ( 1 , A + 1 ) :\n        for j in range ( 1 , B + 1 ) :\n            for k in range ( 1 , C + 1 ) :\n                if ( i * k > j * j ) :\n                    ans += 1\n    return ans\n"}
{"task_id": "Open/90", "problem_prompt": "def countNums ( l , r ) :\n    \"\"\"Write a function that takes two integers, l and r, and returns the count of numbers between l and r (inclusive) whose last digit is either 2, 3, or 9.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countNums(l, r):\n    return sum(1 for num in range(l, r + 1) if str(num)[-1] in '239')", "raw_completion": "```python\ndef countNums(l, r):\n    return sum(1 for num in range(l, r + 1) if str(num)[-1] in '239')\n```", "reference_code": "    cnt = 0 ;\n    for i in range ( l , r + 1 ) :\n        lastDigit = ( i % 10 ) ;\n        if ( ( lastDigit % 10 ) == 2 or ( lastDigit % 10 ) == 3 or ( lastDigit % 10 ) == 9 ) :\n            cnt += 1 ;\n    return cnt ;\n"}
{"task_id": "Open/91", "problem_prompt": "def longestAr ( n , arr ) :\n    \"\"\"Write a function that takes an integer n and a list of integers arr.\n    The function should find the length of the longest arithmetic subsequence in arr.\n    An arithmetic subsequence is a sequence of numbers in which the difference between any two consecutive numbers is the same.\n    The function should return the length of the longest arithmetic subsequence.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def longestAr(n, arr):\n    if n <= 1:\n        return n\n    \n    dp = [{} for _ in range(n)]\n    max_length = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            diff = arr[i] - arr[j]\n            length = dp[j].get(diff, 1) + 1\n            dp[i][diff] = length\n            max_length = max(max_length, length)\n    \n    return max_length", "raw_completion": "```python\ndef longestAr(n, arr):\n    if n <= 1:\n        return n\n    \n    dp = [{} for _ in range(n)]\n    max_length = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            diff = arr[i] - arr[j]\n            length = dp[j].get(diff, 1) + 1\n            dp[i][diff] = length\n            max_length = max(max_length, length)\n    \n    return max_length\n```", "reference_code": "    count = dict ( )\n    for i in arr :\n        count [ i ] = count . get ( i , 0 ) + 1\n    kset = count . keys ( )\n    maxm = 0\n    for it in list ( kset ) :\n        a = it\n        cur = 0\n        cur1 = 0\n        cur2 = 0\n        if ( ( a + 1 ) in count ) :\n            cur1 = count [ a + 1 ]\n        if ( ( a - 1 ) in count ) :\n            cur2 = count [ a - 1 ]\n        cur = count [ a ] + max ( cur1 , cur2 )\n        if ( cur > maxm ) :\n            maxm = cur\n    return maxm\n"}
{"task_id": "Open/92", "problem_prompt": "def findMaxLenEven ( str ) :\n    \"\"\"Write a function that takes a string as input and returns the longest even-length substring that consists of only alphanumeric characters.\n    If there is no such substring, the function should return \"-1\".\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findMaxLenEven(str):\n    n = len(str)\n    max_len = -1\n    start_index = 0\n    \n    for i in range(n):\n        if str[i].isalnum():\n            j = i + 1\n            while j < n and str[j].isalnum():\n                j += 1\n            length = j - i\n            if length % 2 == 0 and length > max_len:\n                max_len = length\n                start_index = i\n            i = j\n    \n    if max_len == -1:\n        return \"-1\"\n    else:\n        return str[start_index:start_index + max_len]", "raw_completion": "```python\ndef findMaxLenEven(str):\n    n = len(str)\n    max_len = -1\n    start_index = 0\n    \n    for i in range(n):\n        if str[i].isalnum():\n            j = i + 1\n            while j < n and str[j].isalnum():\n                j += 1\n            length = j - i\n            if length % 2 == 0 and length > max_len:\n                max_len = length\n                start_index = i\n            i = j\n    \n    if max_len == -1:\n        return \"-1\"\n    else:\n        return str[start_index:start_index + max_len]\n```", "reference_code": "    n = len ( str )\n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = - 1\n    while ( i < n ) :\n        if ( str [ i ] == ' ' ) :\n            if ( currlen % 2 == 0 ) :\n                if ( maxlen < currlen ) :\n                    maxlen = currlen\n                    st = i - currlen\n            currlen = 0\n        else :\n            currlen += 1\n        i += 1\n    if ( currlen % 2 == 0 ) :\n        if ( maxlen < currlen ) :\n            maxlen = currlen\n            st = i - currlen\n    if ( st == - 1 ) :\n        print ( \"trie\" )\n        return \"-1\"\n    return str [ st : st + maxlen ]\n"}
{"task_id": "Open/93", "problem_prompt": "def count ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the number of times the integer can be divided by 2 before it becomes less than or equal to 1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def count(n):\n    return 0 if n <= 1 else 1 + count(n // 2)", "raw_completion": "```python\ndef count(n):\n    return 0 if n <= 1 else 1 + count(n // 2)\n```", "reference_code": "    cnt = 0\n    p = 1\n    while ( p <= n ) :\n        cnt = cnt + 1\n        p *= 2\n    return cnt\n"}
{"task_id": "Open/94", "problem_prompt": "def lexo_small ( n , k ) :\n    \"\"\"Write a function that takes two integers, n and k, and returns a string.\n    The function creates a string of length n, consisting of all 'a' characters.\n    It then modifies the string by replacing some of the 'a' characters with other lowercase letters.\n    The number of replacements is determined by the value of k.\n    The function iterates through the string in reverse order and performs the following steps for each character:\n- Subtract the current index from k.\n   \n- If k is greater than or equal to 0, check if k is greater than or equal to 26.\n    If it is, replace the character at the current index with 'z' and subtract 26 from k.\n    Otherwise, calculate the ASCII value of the character to be replaced by adding k to 97 and subtracting 1.\n    Replace the character at the current index with the corresponding lowercase letter and subtract the difference between the ASCII values of the replaced character and 'a' from k.\n   \n- If k is less than 0, exit the loop.\n   \n- Add the current index to k.\n   \n- Repeat the above steps for the previous index.\n   \nFinally, return the modified string.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def lexo_small(n, k):\n    s = 'a' * n\n    i = n - 1\n    while k >= 0 and i >= 0:\n        k -= i\n        if k >= 0:\n            if k >= 26:\n                s = s[:i] + 'z' + s[i+1:]\n                k -= 26\n            else:\n                new_char = chr(97 + (k % 26))\n                diff = ord(new_char) - ord('a')\n                s = s[:i] + new_char + s[i+1:]\n                k -= diff\n        i -= 1\n    return s", "raw_completion": "```python\ndef lexo_small(n, k):\n    s = 'a' * n\n    i = n - 1\n    while k >= 0 and i >= 0:\n        k -= i\n        if k >= 0:\n            if k >= 26:\n                s = s[:i] + 'z' + s[i+1:]\n                k -= 26\n            else:\n                new_char = chr(97 + (k % 26))\n                diff = ord(new_char) - ord('a')\n                s = s[:i] + new_char + s[i+1:]\n                k -= diff\n        i -= 1\n    return s\n```", "reference_code": "    arr = \"\" ;\n    for i in range ( n ) :\n        arr += 'a' ;\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        k -= i ;\n        if ( k >= 0 ) :\n            if ( k >= 26 ) :\n                arr = arr [ : i ] + 'z' + arr [ i + 1 : ] ;\n                k -= 26 ;\n            else :\n                c = ( k + 97 - 1 ) ;\n                arr = arr [ : i ] + chr ( c ) + arr [ i + 1 : ] ;\n                k -= ord ( arr [ i ] ) - ord ( 'a' ) + 1 ;\n        else :\n            break ;\n        k += i ;\n    return arr ;\n"}
{"task_id": "Open/95", "problem_prompt": "def maxDistance ( n , fuel ) :\n    \"\"\"Write a function that takes two parameters, n and fuel, and returns the maximum distance that can be covered given the number of stops (n) and the amount of fuel available.\n    The function calculates the distance covered by dividing the fuel by the number of stops and adding it to the total distance covered.\n    It then decrements the number of stops by 1 and repeats the process until there are no more stops.\n    Finally, it returns the total distance covered.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def maxDistance(n, fuel):\n    total_distance = 0\n    while n > 0:\n        distance_per_stop = fuel / n\n        total_distance += distance_per_stop\n        n -= 1\n    return total_distance", "raw_completion": "```python\ndef maxDistance(n, fuel):\n    total_distance = 0\n    while n > 0:\n        distance_per_stop = fuel / n\n        total_distance += distance_per_stop\n        n -= 1\n    return total_distance\n```", "reference_code": "    dist_covered = 0\n    while ( n > 0 ) :\n        dist_covered = dist_covered + ( fuel / n )\n        n = n - 1\n    return dist_covered\n"}
{"task_id": "Open/96", "problem_prompt": "def findSplit ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns 1 if there exists a split point in the array such that the sum of the elements before the split point is equal to one-third of the total sum of the array and the sum of the elements after the split point is equal to two-thirds of the total sum of the array.\n    If such a split point does not exist, the function returns 0.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findSplit(arr, n):\n    total_sum = sum(arr)\n    if total_sum % 3 != 0:\n        return 0\n    \n    target_first_part = total_sum // 3\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum == target_first_part and (total_sum - current_sum) * 2 == target_first_part:\n            return 1\n    \n    return 0", "raw_completion": "```python\ndef findSplit(arr, n):\n    total_sum = sum(arr)\n    if total_sum % 3 != 0:\n        return 0\n    \n    target_first_part = total_sum // 3\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum == target_first_part and (total_sum - current_sum) * 2 == target_first_part:\n            return 1\n    \n    return 0\n```", "reference_code": "    preSum = 0\n    ind1 = - 1\n    ind2 = - 1\n    S = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        S += arr [ i ]\n    if ( S % 3 != 0 ) :\n        return 0\n    S1 = S / 3\n    S2 = 2 * S1\n    for i in range ( 0 , n ) :\n        preSum += arr [ i ]\n        if ( preSum % S1 == 0 and ind1 == - 1 ) :\n            ind1 = i\n        elif ( preSum % S2 == 0 ) :\n            ind2 = i\n            break\n    if ( ind1 != - 1 and ind2 != - 1 ) :\n        print ( \"({}, {})\" . format ( ind1 , ind2 ) )\n        return 1\n    return 0\n"}
{"task_id": "Open/97", "problem_prompt": "def isWordPresent ( sentence , word ) :\n    \"\"\"Write a function that takes a sentence and a word as input and returns True if the word is present in the sentence, and False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def isWordPresent(sentence, word):\n    return word in sentence.split()", "raw_completion": "```python\ndef isWordPresent(sentence, word):\n    return word in sentence.split()\n```", "reference_code": "    s = sentence . split ( \" \" )\n    for i in s :\n        if ( i == word ) :\n            return True\n    return False\n"}
{"task_id": "Open/98", "problem_prompt": "import math\n\ndef countDigit ( n ) :\n    \"\"\"Write a function that takes an integer and returns the number of digits in that integer.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countDigit(n):\n    return len(str(abs(n)))", "raw_completion": "```python\ndef countDigit(n):\n    return len(str(abs(n)))\n```", "reference_code": "    return math . floor ( math . log ( n , 10 ) + 1 )\n"}
{"task_id": "Open/99", "problem_prompt": "def canBeEqual ( a , b , c , k ) :\n    \"\"\"Write a function that takes four integers (a, b, c, k) and returns True if it is possible to make all three integers (a, b, c) equal by adding or subtracting a value k, or False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def canBeEqual(a, b, c, k):\n    return (a + b + c) % 3 == 0 and abs(a - b) <= k and abs(b - c) <= k and abs(c - a) <= k", "raw_completion": "```python\ndef canBeEqual(a, b, c, k):\n    return (a + b + c) % 3 == 0 and abs(a - b) <= k and abs(b - c) <= k and abs(c - a) <= k\n```", "reference_code": "    arr = [ 0 ] * 3 ;\n    arr [ 0 ] = a ;\n    arr [ 1 ] = b ;\n    arr [ 2 ] = c ;\n    arr . sort ( )\n    diff = 2 * arr [ 2 ] - arr [ 1 ] - arr [ 0 ] ;\n    k = k - diff ;\n    if ( k < 0 or k % 3 != 0 ) :\n        return False ;\n    return True ;\n"}
{"task_id": "Open/100", "problem_prompt": "def isRotation ( x , y ) :\n    \"\"\"Write a function that takes two integers, x and y, and returns True if y is a rotation of x or False otherwise.\n    A rotation of x is defined as shifting the binary representation of x to the left by 32 bits and performing a bitwise OR operation with the original x.\n    The function checks if the resulting value is equal to y and returns True if it is, otherwise it continues shifting the value to the right by 1 bit until it is less than y.\n    If the value becomes less than y without being equal to it, the function returns False.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def isRotation(x, y):\n    for _ in range(32):\n        if x == y:\n            return True\n        x = (x << 1) | (x >> 31)\n        x &= 0xFFFFFFFF\n    return False", "raw_completion": "```python\ndef isRotation(x, y):\n    for _ in range(32):\n        if x == y:\n            return True\n        x = (x << 1) | (x >> 31)\n        x &= 0xFFFFFFFF\n    return False\n```", "reference_code": "    x64 = x | ( x << 32 )\n    while ( x64 >= y ) :\n        if ( ( x64 ) == y ) :\n            return True\n        x64 >>= 1\n    return False\n"}
{"task_id": "Open/101", "problem_prompt": "def countConsecutive ( s ) :\n    \"\"\"Write a function that takes a string as input and counts the number of consecutive characters that are not the same.\n    The function should return the count.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countConsecutive(s):\n    if not s:\n        return 0\n    \n    count = 1\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            count += 1\n    return count", "raw_completion": "```python\ndef countConsecutive(s):\n    if not s:\n        return 0\n    \n    count = 1\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            count += 1\n    return count\n```", "reference_code": "    count = - 1\n    for i in range ( len ( s ) - 1 ) :\n        if ( i <= len ( s ) ) :\n            if ( s [ i ] is s [ i + 1 ] ) :\n                i += 1\n            else :\n                count += 1\n    return count\n"}
{"task_id": "Open/102", "problem_prompt": "def countChars ( string , n ) :\n    \"\"\"Write a function that takes a string and an integer as input and returns the count of characters in the string.\n    The function counts the characters in the string by iterating through each character and incrementing the count by 1.\n    If the character is '0', the function increments the index by 1.\n    Otherwise, it increments the index by 2.\n    Finally, the function returns the count of characters.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countChars(string, n):\n    count = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count", "raw_completion": "```python\ndef countChars(string, n):\n    count = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count += 2\n    return count\n```", "reference_code": "    i = 0 ; cnt = 0 ;\n    while ( i < n ) :\n        if ( string [ i ] == '0' ) :\n            i += 1 ;\n        else :\n            i += 2 ;\n        cnt += 1 ;\n    return cnt ;\n"}
{"task_id": "Open/103", "problem_prompt": "def findMinRemoval ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the minimum number of elements that need to be removed from the array such that the absolute difference between adjacent elements is minimized.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findMinRemoval(arr, n):\n    arr.sort()\n    removals = 0\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > 1:\n            removals += arr[i] - arr[i-1] - 1\n    return removals", "raw_completion": "```python\ndef findMinRemoval(arr, n):\n    arr.sort()\n    removals = 0\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > 1:\n            removals += arr[i] - arr[i-1] - 1\n    return removals\n```", "reference_code": "    value = 0\n    maximum = 0\n    if ( n == 1 ) :\n        return 0\n    for i in range ( n ) :\n        if ( i != 0 and i != n - 1 ) :\n            value = value + abs ( arr [ i ] - arr [ i + 1 ] )\n            temp = ( abs ( arr [ i ] - arr [ i + 1 ] ) + abs ( arr [ i ] - arr [ i - 1 ] ) - abs ( arr [ i - 1 ] - arr [ i + 1 ] ) )\n        elif ( i == 0 ) :\n            value = value + abs ( arr [ i ] - arr [ i + 1 ] )\n            temp = abs ( arr [ i ] - arr [ i + 1 ] )\n        else :\n            temp = abs ( arr [ i ] - arr [ i - 1 ] )\n        maximum = max ( maximum , temp )\n    return ( value - maximum )\n"}
{"task_id": "Open/104", "problem_prompt": "def countMaxSetBits ( left , right ) :\n    \"\"\"Write a function that takes two integers, `left` and `right`, and returns the maximum number that can be formed by setting the maximum number of consecutive bits in the binary representation of `left` to 1, without exceeding `right`.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countMaxSetBits(left, right):\n    max_set_bits = 0\n    for i in range(32):  # Assuming 32-bit integers for simplicity\n        mask = (1 << i) - 1\n        if left & mask == left and left + (mask + 1) <= right:\n            max_set_bits = i + 1\n    return max_set_bits", "raw_completion": "```python\ndef countMaxSetBits(left, right):\n    max_set_bits = 0\n    for i in range(32):  # Assuming 32-bit integers for simplicity\n        mask = (1 << i) - 1\n        if left & mask == left and left + (mask + 1) <= right:\n            max_set_bits = i + 1\n    return max_set_bits\n```", "reference_code": "    while ( left | ( left + 1 ) ) <= right :\n        left |= left + 1\n    return left\n"}
{"task_id": "Open/105", "problem_prompt": "def setBitNumber ( n ) :\n    \"\"\"Write a function that takes an integer and returns the next power of 2 that is greater than or equal to the input number.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def setBitNumber(n):\n    if n == 0:\n        return 1\n    count = 0\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count", "raw_completion": "```python\ndef setBitNumber(n):\n    if n == 0:\n        return 1\n    count = 0\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n```", "reference_code": "    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n = n + 1\n    return ( n >> 1 )\n"}
{"task_id": "Open/106", "problem_prompt": "def isPerfect ( n ) :\n    \"\"\"Write a function that takes an integer and returns True if the integer is a perfect number or False otherwise.\n    A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding the number itself.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def isPerfect(n):\n    if n <= 1:\n        return False\n    sum_divisors = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n // i:\n                sum_divisors += n // i\n    return sum_divisors == n", "raw_completion": "```python\ndef isPerfect(n):\n    if n <= 1:\n        return False\n    sum_divisors = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n // i:\n                sum_divisors += n // i\n    return sum_divisors == n\n```", "reference_code": "    sum = 1\n    i = 2\n    while i * i <= n :\n        if n % i == 0 :\n            sum = sum + i + n / i\n        i += 1\n    return ( True if sum == n and n != 1 else False )\n"}
{"task_id": "Open/107", "problem_prompt": "def oddDays ( N ) :\n    \"\"\"Write a function that takes a year as input and returns the number of odd days in that year.\n    An odd day is a day that does not occur in a complete week.\n    The function calculates the number of odd days by dividing the year by 100 and 400 to determine the number of centuries and leap centuries respectively.\n    It then calculates the number of leap years by shifting the year by 2 bits.\n    The function subtracts the number of leap years from the total number of days in the year to get the number of non-leap years.\n    If there are any centuries or leap centuries, the function adjusts the number of non-leap years and leap years accordingly.\n    Finally, the function calculates the total number of days by adding the number of non-leap years and twice the number of leap years.\n    The number of odd days is obtained by taking the modulus of the total number of days divided by 7.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def oddDays(N):\n    centuries = N // 100\n    leap_centuries = N // 400\n    leap_years = (N << 2) - centuries + leap_centuries\n    non_leap_years = N - leap_years\n    if centuries:\n        non_leap_years += centuries\n        leap_years -= centuries\n    if leap_centuries:\n        non_leap_years -= leap_centuries\n        leap_years += leap_centuries\n    total_days = non_leap_years + (leap_years << 1)\n    return total_days % 7", "raw_completion": "```python\ndef oddDays(N):\n    centuries = N // 100\n    leap_centuries = N // 400\n    leap_years = (N << 2) - centuries + leap_centuries\n    non_leap_years = N - leap_years\n    if centuries:\n        non_leap_years += centuries\n        leap_years -= centuries\n    if leap_centuries:\n        non_leap_years -= leap_centuries\n        leap_years += leap_centuries\n    total_days = non_leap_years + (leap_years << 1)\n    return total_days % 7\n```", "reference_code": "    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap\n    if ( hund1 ) :\n        ordd += hund1\n        leap -= hund1\n    if ( hund4 ) :\n        ordd -= hund4\n        leap += hund4\n    days = ordd + leap * 2\n    odd = days % 7\n    return odd\n"}
{"task_id": "Open/108", "problem_prompt": "def pentdiagonal ( a ) :\n    \"\"\"Write a function that takes a number as input and returns the pentagonal diagonal length.\n    If the input number is negative, the function should return -1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def pentdiagonal(a):\n    if a < 0:\n        return -1\n    else:\n        return (5 * a * a + 3 * a) // 2", "raw_completion": "```python\ndef pentdiagonal(a):\n    if a < 0:\n        return -1\n    else:\n        return (5 * a * a + 3 * a) // 2\n```", "reference_code": "    if ( a < 0 ) :\n        return - 1\n    d = 1.22 * a\n    return d\n"}
{"task_id": "Open/109", "problem_prompt": "def frequencyDigits ( n , d ) :\n    \"\"\"Write a function that takes two integers, n and d, and returns the frequency of the digit d in the number n.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def frequencyDigits(n, d):\n    return str(n).count(str(d))", "raw_completion": "```python\ndef frequencyDigits(n, d):\n    return str(n).count(str(d))\n```", "reference_code": "    c = 0 ;\n    while ( n > 0 ) :\n        if ( n % 10 == d ) :\n            c += 1 ;\n        n = int ( n / 10 ) ;\n    return c ;\n"}
{"task_id": "Open/110", "problem_prompt": "def validate ( n ) :\n    \"\"\"Write a function that takes an integer and checks if it is a valid number.\n    A valid number is one that does not contain any repeated digits.\n    The function should return True if the number is valid and False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def validate(n):\n    str_n = str(n)\n    return len(str_n) == len(set(str_n))", "raw_completion": "```python\ndef validate(n):\n    str_n = str(n)\n    return len(str_n) == len(set(str_n))\n```", "reference_code": "    count = [ 0 for i in range ( 10 ) ]\n    while ( n > 0 ) :\n        r = n % 10\n        if ( count [ r ] == r ) :\n            return False\n        count [ r ] += 1\n        n = n // 10\n    return True\n"}
{"task_id": "Open/111", "problem_prompt": "def canMakeEqual ( a , n ) :\n    \"\"\"Write a function that takes a list of integers and an integer n as input.\n    The function checks if it is possible to make all the elements in the list equal by repeatedly dividing each element by 5 and 3 until they are no longer divisible by either.\n    If it is possible to make all the elements equal, the function returns True.\n    Otherwise, it returns False.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def canMakeEqual(a, n):\n    while True:\n        divisible_by_5 = any(x % 5 == 0 for x in a)\n        divisible_by_3 = any(x % 3 == 0 for x in a)\n        if not (divisible_by_5 or divisible_by_3):\n            break\n        for i in range(n):\n            if a[i] % 5 == 0:\n                a[i] //= 5\n            if a[i] % 3 == 0:\n                a[i] //= 3\n    return all(x == a[0] for x in a)", "raw_completion": "```python\ndef canMakeEqual(a, n):\n    while True:\n        divisible_by_5 = any(x % 5 == 0 for x in a)\n        divisible_by_3 = any(x % 3 == 0 for x in a)\n        if not (divisible_by_5 or divisible_by_3):\n            break\n        for i in range(n):\n            if a[i] % 5 == 0:\n                a[i] //= 5\n            if a[i] % 3 == 0:\n                a[i] //= 3\n    return all(x == a[0] for x in a)\n```", "reference_code": "    for i in range ( n ) :\n        while ( a [ i ] % 5 == 0 ) :\n            a [ i ] //= 5 ;\n        while ( a [ i ] % 3 == 0 ) :\n            a [ i ] //= 3 ;\n    last = a [ 0 ] ;\n    for i in range ( 1 , n ) :\n        if ( a [ i ] != last ) :\n            return False ;\n    return True ;\n"}
{"task_id": "Open/112", "problem_prompt": "def printNthElement ( n ) :\n    \"\"\"Write a function that takes an integer n as input and returns the nth element of an array.\n    The array is initialized with 0s and has a length of n+1.\n    The first element of the array is set to 4 and the second element is set to 7.\n    For each index i from 3 to n+1, if i is odd, the value at index i is set to the value at index i//2 multiplied by 10 and added to 4.\n    If i is even, the value at index i is set to the value at index (i//2)-1 multiplied by 10 and added to 7.\n    Finally, the function returns the value at index n of the array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def printNthElement(n):\n    arr = [0] * (n + 1)\n    arr[0] = 4\n    arr[1] = 7\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            arr[i] = arr[(i // 2) - 1] * 10 + 7\n        else:\n            arr[i] = arr[i // 2] * 10 + 4\n    return arr[n]", "raw_completion": "```python\ndef printNthElement(n):\n    arr = [0] * (n + 1)\n    arr[0] = 4\n    arr[1] = 7\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            arr[i] = arr[(i // 2) - 1] * 10 + 7\n        else:\n            arr[i] = arr[i // 2] * 10 + 4\n    return arr[n]\n```", "reference_code": "    arr = [ 0 ] * ( n + 1 ) ;\n    arr [ 1 ] = 4\n    arr [ 2 ] = 7\n    for i in range ( 3 , n + 1 ) :\n        if ( i % 2 != 0 ) :\n            arr [ i ] = arr [ i // 2 ] * 10 + 4\n        else :\n            arr [ i ] = arr [ ( i // 2 ) - 1 ] * 10 + 7\n    return arr [ n ]\n"}
{"task_id": "Open/113", "problem_prompt": "def printNthElement ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth element of an array.\n    The array is initialized with 0s and has a length of n+1.\n    The first element is set to 3 and the second element is set to 5.\n    For each index i from 3 to n+1, if i is odd, the element at index i is set to the element at index i//2 multiplied by 10 and added with 3.\n    If i is even, the element at index i is set to the element at index (i//2)-1 multiplied by 10 and added with 5.\n    Finally, the function returns the element at index n.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def printNthElement(n):\n    arr = [0] * (n + 1)\n    arr[0] = 3\n    arr[1] = 5\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            arr[i] = arr[(i // 2) - 1] * 10 + 5\n        else:\n            arr[i] = arr[i // 2] * 10 + 3\n    return arr[n]", "raw_completion": "```python\ndef printNthElement(n):\n    arr = [0] * (n + 1)\n    arr[0] = 3\n    arr[1] = 5\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            arr[i] = arr[(i // 2) - 1] * 10 + 5\n        else:\n            arr[i] = arr[i // 2] * 10 + 3\n    return arr[n]\n```", "reference_code": "    arr = [ 0 ] * ( n + 1 ) ;\n    arr [ 1 ] = 3\n    arr [ 2 ] = 5\n    for i in range ( 3 , n + 1 ) :\n        if ( i % 2 != 0 ) :\n            arr [ i ] = arr [ i // 2 ] * 10 + 3\n        else :\n            arr [ i ] = arr [ ( i // 2 ) - 1 ] * 10 + 5\n    return arr [ n ]\n"}
{"task_id": "Open/114", "problem_prompt": "def printNthElement ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth element of an array.\n    The array is initialized with 0s and has a length of n+1.\n    The first element is set to 1 and the second element is set to 2.\n    For each subsequent element, if the index is odd, the element is calculated by multiplying the element at index i//2 by 10 and adding 1.\n    If the index is even, the element is calculated by multiplying the element at index (i//2)-1 by 10 and adding 2.\n    The function returns the element at index n.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def printNthElement(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    \n    array = [0] * (n + 1)\n    array[0] = 1\n    array[1] = 2\n    \n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            array[i] = array[(i // 2) - 1] * 10 + 2\n        else:\n            array[i] = array[i // 2] * 10 + 1\n    \n    return array[n]", "raw_completion": "```python\ndef printNthElement(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    \n    array = [0] * (n + 1)\n    array[0] = 1\n    array[1] = 2\n    \n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            array[i] = array[(i // 2) - 1] * 10 + 2\n        else:\n            array[i] = array[i // 2] * 10 + 1\n    \n    return array[n]\n```", "reference_code": "    arr = [ 0 ] * ( n + 1 ) ;\n    arr [ 1 ] = 1\n    arr [ 2 ] = 2\n    for i in range ( 3 , n + 1 ) :\n        if ( i % 2 != 0 ) :\n            arr [ i ] = arr [ i // 2 ] * 10 + 1\n        else :\n            arr [ i ] = arr [ ( i // 2 ) - 1 ] * 10 + 2\n    return arr [ n ]\n"}
{"task_id": "Open/115", "problem_prompt": "def isPossibleToZero ( a , n ) :\n    \"\"\"Write a function that takes an array of integers and its length as input and returns True if it is possible to form a number by concatenating the elements of the array such that the resulting number is divisible by 11.\n    Otherwise, it returns False.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def isPossibleToZero(a, n):\n    total_sum = sum(a)\n    if total_sum % 11 == 0:\n        return True\n    else:\n        return False", "raw_completion": "```python\ndef isPossibleToZero(a, n):\n    total_sum = sum(a)\n    if total_sum % 11 == 0:\n        return True\n    else:\n        return False\n```", "reference_code": "    num = 0 ;\n    for i in range ( n ) :\n        num = num * 10 + a [ i ] ;\n    return ( num % 11 == 0 ) ;\n"}
{"task_id": "Open/116", "problem_prompt": "def squareArea ( l , b , h ) :\n    \"\"\"Write a function that takes three parameters representing the length, breadth, and height of a square.\n    The function should return the area of the square if all the parameters are positive, otherwise it should return -1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def squareArea(l, b, h):\n    if l > 0 and b > 0 and h > 0:\n        return l * b\n    else:\n        return -1", "raw_completion": "```python\ndef squareArea(l, b, h):\n    if l > 0 and b > 0 and h > 0:\n        return l * b\n    else:\n        return -1\n```", "reference_code": "    if l < 0 or b < 0 or h < 0 :\n        return - 1\n    a = ( l * b ) / ( l + b )\n    return a * a\n"}
{"task_id": "Open/117", "problem_prompt": "def FirstAndLast ( string ) :\n    \"\"\"Write a function that takes a string as input and returns a new string where the first and last letter of each word in the input string are capitalized.\n    The function should ignore any non-alphabetic characters.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def FirstAndLast(string):\n    words = string.split()\n    result = []\n    for word in words:\n        if word.isalpha():\n            first_last = word[0].upper() + word[-1].upper() + word[1:-1]\n            result.append(first_last)\n        else:\n            result.append(word)\n    return ' '.join(result)", "raw_completion": "```python\ndef FirstAndLast(string):\n    words = string.split()\n    result = []\n    for word in words:\n        if word.isalpha():\n            first_last = word[0].upper() + word[-1].upper() + word[1:-1]\n            result.append(first_last)\n        else:\n            result.append(word)\n    return ' '.join(result)\n```", "reference_code": "    ch = list ( string ) ;\n    i = 0 ;\n    while i < len ( ch ) :\n        k = i ;\n        while ( i < len ( ch ) and ch [ i ] != ' ' ) :\n            i += 1 ;\n        if ( ord ( ch [ k ] ) >= 97 and ord ( ch [ k ] ) <= 122 ) :\n            ch [ k ] = chr ( ord ( ch [ k ] ) - 32 ) ;\n        else :\n            ch [ k ] = ch [ k ]\n        if ( ord ( ch [ i - 1 ] ) >= 90 and ord ( ch [ i - 1 ] ) <= 122 ) :\n            ch [ i - 1 ] = chr ( ord ( ch [ i - 1 ] ) - 32 ) ;\n        else :\n            ch [ i - 1 ] = ch [ i - 1 ]\n        i += 1\n    return \"\" . join ( ch ) ;\n"}
{"task_id": "Open/118", "problem_prompt": "import math\n\ndef findBucketNo ( p ) :\n    \"\"\"Write a function that takes an integer p and returns the bucket number where p belongs.\n    The bucket number is calculated by taking the ceiling of the square root of (8 * p + 1) minus 1, divided by 2.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef findBucketNo(p):\n    return math.ceil((math.sqrt(8 * p + 1) - 1) / 2)", "raw_completion": "```python\nimport math\n\ndef findBucketNo(p):\n    return math.ceil((math.sqrt(8 * p + 1) - 1) / 2)\n```", "reference_code": "    return math . ceil ( ( math . sqrt ( 8 * p + 1 ) - 1 ) / 2 )\n"}
{"task_id": "Open/119", "problem_prompt": "def areDistinct ( arr ) :\n    \"\"\"Write a function that takes an array as input and returns True if all the elements in the array are distinct (i.\n   e.\n   , there are no duplicate elements), and False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def areDistinct(arr):\n    return len(arr) == len(set(arr))", "raw_completion": "```python\ndef areDistinct(arr):\n    return len(arr) == len(set(arr))\n```", "reference_code": "    n = len ( arr )\n    s = set ( )\n    for i in range ( 0 , n ) :\n        s . add ( arr [ i ] )\n    return ( len ( s ) == len ( arr ) )\n"}
{"task_id": "Open/120", "problem_prompt": "def countDistinctCode ( string ) :\n    \"\"\"Write a function that takes a string as input and returns the count of distinct two-character codes in the string.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countDistinctCode(string):\n    return len(set(string[i:i+2] for i in range(len(string) - 1)))", "raw_completion": "```python\ndef countDistinctCode(string):\n    return len(set(string[i:i+2] for i in range(len(string) - 1)))\n```", "reference_code": "    codes = set ( )\n    for i in range ( 0 , len ( string ) - 1 ) :\n        codes . add ( string [ i : i + 2 ] )\n    return len ( codes )\n"}
{"task_id": "Open/121", "problem_prompt": "def mostCommon ( lower , higher ) :\n    \"\"\"Write a function that takes two numbers, lower and higher, and returns the most common number between them.\n    If lower and higher are equal, the function should return lower.\n    Otherwise, the function should return 2.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def mostCommon(lower, higher):\n    if lower == higher:\n        return lower\n    else:\n        return 2", "raw_completion": "```python\ndef mostCommon(lower, higher):\n    if lower == higher:\n        return lower\n    else:\n        return 2\n```", "reference_code": "    if ( lower == higher ) :\n        return lower\n    else :\n        return 2\n"}
{"task_id": "Open/122", "problem_prompt": "def extractMaximum ( ss ) :\n    \"\"\"Write a function that takes a string as input and returns the maximum number that can be extracted from the string.\n    The function iterates through each character in the string and checks if it is a digit.\n    If it is, the function builds a number by multiplying the previous number by 10 and adding the current digit.\n    If the character is not a digit, the function compares the current number with the previous maximum number and updates the maximum if necessary.\n    Finally, the function returns the maximum number extracted from the string.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def extractMaximum(ss):\n    max_num = 0\n    current_num = 0\n    for char in ss:\n        if char.isdigit():\n            current_num = current_num * 10 + int(char)\n        else:\n            max_num = max(max_num, current_num)\n            current_num = 0\n    return max(max_num, current_num)", "raw_completion": "```python\ndef extractMaximum(ss):\n    max_num = 0\n    current_num = 0\n    for char in ss:\n        if char.isdigit():\n            current_num = current_num * 10 + int(char)\n        else:\n            max_num = max(max_num, current_num)\n            current_num = 0\n    return max(max_num, current_num)\n```", "reference_code": "    num , res = 0 , 0\n    for i in range ( len ( ss ) ) :\n        if ss [ i ] >= \"0\" and ss [ i ] <= \"9\" :\n            num = num * 10 + int ( int ( ss [ i ] ) - 0 )\n        else :\n            res = max ( res , num )\n            num = 0\n    return max ( res , num )\n"}
{"task_id": "Open/123", "problem_prompt": "def longestInteger ( s , length ) :\n    \"\"\"Write a function that takes a string and its length as input and returns the longest substring of consecutive integers in the string.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def longestInteger(s, length):\n    max_length = 0\n    current_length = 0\n\n    for i in range(length):\n        if s[i].isdigit():\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n\n    return max_length", "raw_completion": "```python\ndef longestInteger(s, length):\n    max_length = 0\n    current_length = 0\n\n    for i in range(length):\n        if s[i].isdigit():\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n\n    return max_length\n```", "reference_code": "    count = 0\n    maximum = 0\n    pos = - 1\n    l = 0\n    for i in range ( length ) :\n        pre_pos = pos\n        pre_len = l\n        count = 0\n        l = 0\n        if ( s [ i ] . isdecimal ( ) ) :\n            pos = i\n        while ( s [ i ] . isdecimal ( ) ) :\n            count += 1\n            i += 1\n            l += 1\n        if ( count > maximum ) :\n            maximum = count\n        else :\n            pos = pre_pos\n            l = pre_len\n    return ( s [ pos : pos + l ] )\n"}
{"task_id": "Open/124", "problem_prompt": "def remainingArea ( N , M , K ) :\n    \"\"\"Write a function that takes three integers N, M, and K as input and returns the remaining area after performing a series of operations.\n    The function subtracts the smaller value between N and M from the larger value until K becomes 0 or either N or M becomes 0.\n    If both N and M are greater than 0 after the loop, the function returns the product of N and M.\n    Otherwise, it returns 0.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def remainingArea(N, M, K):\n    while K > 0 and N > 0 and M > 0:\n        if N < M:\n            M -= N\n        else:\n            N -= M\n        K -= 1\n    return N * M", "raw_completion": "```python\ndef remainingArea(N, M, K):\n    while K > 0 and N > 0 and M > 0:\n        if N < M:\n            M -= N\n        else:\n            N -= M\n        K -= 1\n    return N * M\n```", "reference_code": "    while ( K > 0 and N > 0 and M > 0 ) :\n        if ( N > M ) :\n            N = N - M ;\n        else :\n            M = M - N ;\n        K = K - 1 ;\n    if ( N > 0 and M > 0 ) :\n        return N * M ;\n    else :\n        return 0 ;\n"}
{"task_id": "Open/125", "problem_prompt": "def isValid ( string , length ) :\n    \"\"\"Write a function that takes a string and a length as input and returns True if the string is valid or False otherwise.\n    A string is considered valid if no two consecutive characters are the same.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def isValid(string, length):\n    for i in range(1, length):\n        if string[i] == string[i - 1]:\n            return False\n    return True", "raw_completion": "```python\ndef isValid(string, length):\n    for i in range(1, length):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n```", "reference_code": "    for i in range ( 1 , length ) :\n        if string [ i ] == string [ i - 1 ] :\n            return False\n    return True\n"}
{"task_id": "Open/126", "problem_prompt": "def getValue ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the largest power of 2 that is less than or equal to n.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def getValue(n):\n    return 2 ** int(n.bit_length() - 1)", "raw_completion": "```python\ndef getValue(n):\n    return 2 ** int(n.bit_length() - 1)\n```", "reference_code": "    i = 0 ;\n    k = 1 ;\n    while ( i < n ) :\n        i = i + k ;\n        k = k * 2 ;\n    return int ( k / 2 ) ;\n"}
{"task_id": "Open/127", "problem_prompt": "def sameLength ( A , B ) :\n    \"\"\"Write a function that takes two integers, A and B, and returns True if both A and B have the same number of digits, and False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def sameLength(A, B):\n    return len(str(A)) == len(str(B))", "raw_completion": "```python\ndef sameLength(A, B):\n    return len(str(A)) == len(str(B))\n```", "reference_code": "    while ( A > 0 and B > 0 ) :\n        A = A / 10 ;\n        B = B / 10 ;\n    if ( A == 0 and B == 0 ) :\n        return True ;\n    return False ;\n"}
{"task_id": "Open/128", "problem_prompt": "def isPossible ( x , y ) :\n    \"\"\"Write a function that takes two integers, x and y, and returns True if the difference between x and y is not equal to 1, or False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def isPossible(x, y):\n    return abs(x - y) != 1", "raw_completion": "```python\ndef isPossible(x, y):\n    return abs(x - y) != 1\n```", "reference_code": "    if ( ( x - y ) == 1 ) :\n        return False\n    return True\n"}
{"task_id": "Open/129", "problem_prompt": "def tribWord ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth Tribonacci word.\n    The Tribonacci word is a sequence of strings where each string is formed by concatenating the previous two strings in the sequence.\n    The first three strings in the sequence are \"1\", \"12\", and \"1213\".\n    The function should iterate from 3 to n and update the values of Sn_1, Sn_2, and Sn_3 accordingly.\n    Finally, it should return Sn_3, which represents the nth Tribonacci word.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def tribWord(n):\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"12\"\n    elif n == 3:\n        return \"1213\"\n    \n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    \n    for _ in range(4, n + 1):\n        Sn_3 = Sn_2 + Sn_1\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    \n    return Sn_3", "raw_completion": "```python\ndef tribWord(n):\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"12\"\n    elif n == 3:\n        return \"1213\"\n    \n    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    \n    for _ in range(4, n + 1):\n        Sn_3 = Sn_2 + Sn_1\n        Sn_1 = Sn_2\n        Sn_2 = Sn_3\n    \n    return Sn_3\n```", "reference_code": "    Sn_1 = \"1\"\n    Sn_2 = \"12\"\n    Sn_3 = \"1213\"\n    for i in range ( 3 , n + 1 ) :\n        tmp = Sn_3\n        Sn_3 += ( Sn_2 + Sn_1 )\n        Sn_1 = Sn_2\n        Sn_2 = tmp\n    return Sn_3\n"}
{"task_id": "Open/130", "problem_prompt": "def minSteps ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the minimum number of steps required to reach each element in the array.\n    The number of steps is calculated by taking the absolute difference between each element and the previous element in the array, and summing them up.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def minSteps(arr, n):\n    if n <= 1:\n        return 0\n    \n    steps = 0\n    for i in range(1, n):\n        steps += abs(arr[i] - arr[i-1])\n    \n    return steps", "raw_completion": "```python\ndef minSteps(arr, n):\n    if n <= 1:\n        return 0\n    \n    steps = 0\n    for i in range(1, n):\n        steps += abs(arr[i] - arr[i-1])\n    \n    return steps\n```", "reference_code": "    min_Steps = 0\n    for i in range ( n ) :\n        if ( i > 0 ) :\n            min_Steps += abs ( arr [ i ] - arr [ i - 1 ] )\n        else :\n            min_Steps += abs ( arr [ i ] )\n    return min_Steps\n"}
{"task_id": "Open/131", "problem_prompt": "def fnMod ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns 0 if the remainder of dividing the integer by 4 is 0 or 3, and returns 1 if the remainder is 1 or 2.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def fnMod(n):\n    return 0 if n % 4 == 0 or n % 4 == 3 else 1", "raw_completion": "```python\ndef fnMod(n):\n    return 0 if n % 4 == 0 or n % 4 == 3 else 1\n```", "reference_code": "    rem = n % 4\n    if ( rem == 0 or rem == 3 ) :\n        return 0\n    elif ( rem == 1 or rem == 2 ) :\n        return 1\n"}
{"task_id": "Open/132", "problem_prompt": "def calculate_sum ( a , N ) :\n    \"\"\"Write a function that takes two parameters, `a` and `N`, and calculates the sum of all numbers that are multiples of `a` up to `N`.\n    The function first calculates the number of multiples of `a` up to `N` and stores it in the variable `m`.\n    Then, it calculates the sum of all numbers from 1 to `m` using the formula `(m * (m + 1)) / 2` and stores it in the variable `sum`.\n    Finally, it multiplies `a` by `sum` and returns the result as `ans`.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def calculate_sum(a, N):\n    m = (N - 1) // a\n    sum = m * (m + 1) // 2\n    ans = a * sum\n    return ans", "raw_completion": "```python\ndef calculate_sum(a, N):\n    m = (N - 1) // a\n    sum = m * (m + 1) // 2\n    ans = a * sum\n    return ans\n```", "reference_code": "    m = N / a\n    sum = m * ( m + 1 ) / 2\n    ans = a * sum\n    return ans\n"}
{"task_id": "Open/133", "problem_prompt": "def MDAS_Factorial ( N ) :\n    \"\"\"Write a function that takes an integer N and returns a value based on the following conditions:\n- If N is less than or equal to 2, return N.\n   \n- If N is less than or equal to 4, return N + 3.\n   \n- If (N - 4) is divisible by 4, return N + 1.\n   \n- If (N - 4) modulo 4 is less than or equal to 2, return N + 2.\n   \n- Otherwise, return N - 1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def MDAS_Factorial(N):\n    if N <= 2:\n        return N\n    elif N <= 4:\n        return N + 3\n    elif (N - 4) % 4 == 0:\n        return N + 1\n    elif (N - 4) % 4 <= 2:\n        return N + 2\n    else:\n        return N - 1", "raw_completion": "```python\ndef MDAS_Factorial(N):\n    if N <= 2:\n        return N\n    elif N <= 4:\n        return N + 3\n    elif (N - 4) % 4 == 0:\n        return N + 1\n    elif (N - 4) % 4 <= 2:\n        return N + 2\n    else:\n        return N - 1\n```", "reference_code": "    if N <= 2 :\n        return N\n    if N <= 4 :\n        return N + 3\n    if ( N - 4 ) % 4 == 0 :\n        return N + 1\n    elif ( N - 4 ) % 4 <= 2 :\n        return N + 2\n    else :\n        return N - 1\n"}
{"task_id": "Open/134", "problem_prompt": "def checkArray ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns True if the first element of the array, the last element of the array, and the length of the array are all odd numbers.\n    Otherwise, it returns False.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def checkArray(arr, n):\n    return arr[0] % 2 != 0 and arr[-1] % 2 != 0 and n % 2 != 0", "raw_completion": "```python\ndef checkArray(arr, n):\n    return arr[0] % 2 != 0 and arr[-1] % 2 != 0 and n % 2 != 0\n```", "reference_code": "    return ( ( arr [ 0 ] % 2 ) and ( arr [ n - 1 ] % 2 ) and ( n % 2 ) )\n"}
{"task_id": "Open/135", "problem_prompt": "def countSum ( N , L , R ) :\n    \"\"\"Write a function that takes three parameters: N, L, and R.\n    The function returns the count of numbers between L and R (inclusive) that can be formed by adding N-1 numbers.\n    If N is equal to 1, the function returns the count of numbers between L and R (inclusive).\n    If N is greater than 1, the function returns the count of numbers between L and R (inclusive) that can be formed by adding N-2 numbers, plus 1.\n    If none of the conditions are met, the function returns 0.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countSum(N, L, R):\n    if N == 1:\n        return R - L + 1\n    elif N > 1:\n        return countSum(N-2, L, R) + 1\n    else:\n        return 0", "raw_completion": "```python\ndef countSum(N, L, R):\n    if N == 1:\n        return R - L + 1\n    elif N > 1:\n        return countSum(N-2, L, R) + 1\n    else:\n        return 0\n```", "reference_code": "    if ( L > R ) :\n        return 0 ;\n    if ( N == 1 ) :\n        return R - L + 1 ;\n    if ( N > 1 ) :\n        return ( N - 2 ) * ( R - L ) + 1 ;\n    return 0 ;\n"}
{"task_id": "Open/136", "problem_prompt": "def findMin ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the smallest positive integer that is not present in the array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findMin(arr, n):\n    if 1 not in arr:\n        return 1\n    for i in range(1, n + 2):\n        if i not in arr:\n            return i", "raw_completion": "```python\ndef findMin(arr, n):\n    if 1 not in arr:\n        return 1\n    for i in range(1, n + 2):\n        if i not in arr:\n            return i\n```", "reference_code": "    m = 0\n    for i in range ( n ) :\n        m = max ( m , arr [ i ] )\n    freq = [ 0 ] * ( m + 2 )\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += 1\n    for i in range ( 1 , m + 2 ) :\n        j = i\n        cnt = 0\n        while ( j <= m ) :\n            cnt += freq [ j ]\n            j += i\n        if ( not cnt ) :\n            return i\n    return m + 1\n"}
{"task_id": "Open/137", "problem_prompt": "def smallestPoss ( s , n ) :\n    \"\"\"Write a function that takes a string and an integer as input and returns the smallest possible number that can be formed by rearranging the digits of the string.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def smallestPoss(s, n):\n    from collections import Counter\n    count = Counter(s)\n    result = []\n    for digit in range(n):\n        for char in sorted(count.keys()):\n            if count[char] > 0:\n                result.append(char)\n                count[char] -= 1\n                break\n    return ''.join(result)", "raw_completion": "```python\ndef smallestPoss(s, n):\n    from collections import Counter\n    count = Counter(s)\n    result = []\n    for digit in range(n):\n        for char in sorted(count.keys()):\n            if count[char] > 0:\n                result.append(char)\n                count[char] -= 1\n                break\n    return ''.join(result)\n```", "reference_code": "    ans = \"\" ;\n    arr = [ 0 ] * 10 ;\n    for i in range ( n ) :\n        arr [ ord ( s [ i ] ) - 48 ] += 1 ;\n    for i in range ( 10 ) :\n        for j in range ( arr [ i ] ) :\n            ans = ans + str ( i ) ;\n    return ans ;\n"}
{"task_id": "Open/138", "problem_prompt": "def totalBoxesRemoved ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the total number of boxes removed.\n    The function iterates through the array and compares each element with the previous element.\n    If the current element is greater than the previous element, the difference is added to the count and the current element is replaced with the previous element.\n    If the current element is less than or equal to the previous element, the previous element is updated to the current element.\n    Finally, the function returns the count.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def totalBoxesRemoved(arr, n):\n    count = 0\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            count += arr[i] - arr[i - 1]\n            arr[i] = arr[i - 1]\n    return count", "raw_completion": "```python\ndef totalBoxesRemoved(arr, n):\n    count = 0\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            count += arr[i] - arr[i - 1]\n            arr[i] = arr[i - 1]\n    return count\n```", "reference_code": "    count = 0\n    prev = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > prev ) :\n            count += ( arr [ i ] - prev )\n            arr [ i ] = prev\n            prev = arr [ i ]\n        else :\n            prev = arr [ i ]\n    return count\n"}
{"task_id": "Open/139", "problem_prompt": "def averageValue ( s ) :\n    \"\"\"Write a function that takes a string as input and returns the average value of the ASCII codes of its characters.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def averageValue(s):\n    return sum(ord(char) for char in s) / len(s)", "raw_completion": "```python\ndef averageValue(s):\n    return sum(ord(char) for char in s) / len(s)\n```", "reference_code": "    sum_char = 0\n    for i in range ( len ( s ) ) :\n        sum_char += ord ( s [ i ] )\n    return sum_char // len ( s )\n"}
{"task_id": "Open/140", "problem_prompt": "def bankNotes ( A , B , S , N ) :\n    \"\"\"Write a function that takes four parameters: A, B, S, and N.\n    The function calculates the number of banknotes needed to reach a certain amount S, given that each banknote has a value of A and there are N banknotes of value B.\n    The function returns the minimum number of banknotes needed, or -1 if it is not possible to reach the desired amount.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def bankNotes(A, B, S, N):\n    for i in range(N + 1):\n        if (S - A * i) % B == 0 and (S - A * i) // B >= 0:\n            return i + (S - A * i) // B\n    return -1", "raw_completion": "```python\ndef bankNotes(A, B, S, N):\n    for i in range(N + 1):\n        if (S - A * i) % B == 0 and (S - A * i) // B >= 0:\n            return i + (S - A * i) // B\n    return -1\n```", "reference_code": "    numerator = S - ( B * N )\n    denominator = A - B\n    if ( numerator % denominator == 0 ) :\n        return ( numerator // denominator )\n    return - 1\n"}
{"task_id": "Open/141", "problem_prompt": "import math\n\ndef lcm ( x , y ) :\n    \"\"\"Write a function that takes two integers, x and y, and returns their least common multiple (LCM).\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef lcm(x, y):\n    return abs(x * y) // math.gcd(x, y)", "raw_completion": "```python\nimport math\n\ndef lcm(x, y):\n    return abs(x * y) // math.gcd(x, y)\n```", "reference_code": "    return ( x * y ) // math . gcd ( x , y )\n"}
{"task_id": "Open/142", "problem_prompt": "def CountTrailingZeros ( n ) :\n    \"\"\"Write a function that takes an integer as input and counts the number of trailing zeros in its binary representation.\n    The function should return the count of trailing zeros.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def CountTrailingZeros(n):\n    count = 0\n    while n % 2 == 0 and n != 0:\n        n //= 2\n        count += 1\n    return count", "raw_completion": "```python\ndef CountTrailingZeros(n):\n    count = 0\n    while n % 2 == 0 and n != 0:\n        n //= 2\n        count += 1\n    return count\n```", "reference_code": "    bit = bin ( n ) [ 2 : ]\n    bit = bit [ : : - 1 ]\n    zero = 0 ;\n    for i in range ( len ( bit ) ) :\n        if ( bit [ i ] == '0' ) :\n            zero += 1\n        else :\n            break\n    return zero\n"}
{"task_id": "Open/143", "problem_prompt": "def Xor_Sum ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the index of the element in the array such that the sum of the XOR of all elements to the left of it and the XOR of all elements to the right of it is maximum.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def Xor_Sum(arr, n):\n    max_xor = -1\n    result_index = -1\n    \n    for i in range(n):\n        left_xor = 0\n        right_xor = 0\n        \n        # Calculate XOR of all elements to the left of arr[i]\n        for j in range(i):\n            left_xor ^= arr[j]\n        \n        # Calculate XOR of all elements to the right of arr[i]\n        for j in range(i + 1, n):\n            right_xor ^= arr[j]\n        \n        # Check if the current sum is greater than the maximum found so far\n        if left_xor + right_xor > max_xor:\n            max_xor = left_xor + right_xor\n            result_index = i\n    \n    return result_index", "raw_completion": "```python\ndef Xor_Sum(arr, n):\n    max_xor = -1\n    result_index = -1\n    \n    for i in range(n):\n        left_xor = 0\n        right_xor = 0\n        \n        # Calculate XOR of all elements to the left of arr[i]\n        for j in range(i):\n            left_xor ^= arr[j]\n        \n        # Calculate XOR of all elements to the right of arr[i]\n        for j in range(i + 1, n):\n            right_xor ^= arr[j]\n        \n        # Check if the current sum is greater than the maximum found so far\n        if left_xor + right_xor > max_xor:\n            max_xor = left_xor + right_xor\n            result_index = i\n    \n    return result_index\n```", "reference_code": "    sum = 0\n    index , left_xor = 0 , 0\n    right_xor = 0\n    for i in range ( n ) :\n        left_xor = left_xor ^ arr [ i ]\n        right_xor = 0\n        for j in range ( i + 1 , n ) :\n            right_xor = right_xor ^ arr [ j ]\n        if ( left_xor + right_xor > sum ) :\n            sum = left_xor + right_xor\n            index = i\n    return index + 1\n"}
{"task_id": "Open/144", "problem_prompt": "def lds ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the length of the longest decreasing subsequence in the array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def lds(arr, n):\n    if n == 0:\n        return 0\n    \n    # Initialize the list to store the length of the longest decreasing subsequence ending at each index\n    lds_lengths = [1] * n\n    \n    # Compute the length of the longest decreasing subsequence for each element\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                lds_lengths[i] = max(lds_lengths[i], lds_lengths[j] + 1)\n    \n    # The length of the longest decreasing subsequence is the maximum value in lds_lengths\n    return max(lds_lengths)", "raw_completion": "```python\ndef lds(arr, n):\n    if n == 0:\n        return 0\n    \n    # Initialize the list to store the length of the longest decreasing subsequence ending at each index\n    lds_lengths = [1] * n\n    \n    # Compute the length of the longest decreasing subsequence for each element\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                lds_lengths[i] = max(lds_lengths[i], lds_lengths[j] + 1)\n    \n    # The length of the longest decreasing subsequence is the maximum value in lds_lengths\n    return max(lds_lengths)\n```", "reference_code": "    lds = [ 0 for i in range ( n ) ]\n    lds [ 0 ] = 1\n    for i in range ( n ) :\n        lds [ i ] = 1\n        for j in range ( i ) :\n            if ( lds [ j ] != 0 and arr [ i ] % arr [ j ] == 0 ) :\n                lds [ i ] = max ( lds [ i ] , lds [ j ] + 1 )\n    return max ( lds )\n"}
{"task_id": "Open/145", "problem_prompt": "def equalize ( arr , n , k ) :\n    \"\"\"Write a function that takes an array, its length, and a value k.\n    The function checks if it is possible to make all elements of the array equal by adding or subtracting k from each element.\n    If it is possible, the function returns the minimum element of the array plus k.\n    Otherwise, it returns -1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def equalize(arr, n, k):\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    if (max_val - min_val) % k != 0:\n        return -1\n    \n    target = min_val + k\n    for i in range(n):\n        arr[i] += k\n    \n    return target", "raw_completion": "```python\ndef equalize(arr, n, k):\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    if (max_val - min_val) % k != 0:\n        return -1\n    \n    target = min_val + k\n    for i in range(n):\n        arr[i] += k\n    \n    return target\n```", "reference_code": "    min_ele = min ( arr ) ;\n    flag = True ;\n    for i in range ( n ) :\n        if ( not ( ( arr [ i ] + k ) >= ( min_ele + k ) and ( min_ele + k ) >= ( arr [ i ] - k ) ) ) :\n            flag = False ;\n            break ;\n    if ( flag ) :\n        return min_ele + k ;\n    else :\n        return - 1 ;\n"}
{"task_id": "Open/146", "problem_prompt": "def numLen ( K ) :\n    \"\"\"Write a function that takes an integer K and returns the length of the smallest repeating sequence of the number 1 when divided by K.\n    If there is no repeating sequence, return -1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def numLen(K):\n    if K % 2 == 0 or K % 5 == 0:\n        return -1\n    remainder = 1\n    length = 0\n    seen_remainders = {}\n    \n    while remainder != 0:\n        if remainder in seen_remainders:\n            return length - seen_remainders[remainder]\n        seen_remainders[remainder] = length\n        remainder = (remainder * 10) % K\n        length += 1\n    \n    return -1", "raw_completion": "```python\ndef numLen(K):\n    if K % 2 == 0 or K % 5 == 0:\n        return -1\n    remainder = 1\n    length = 0\n    seen_remainders = {}\n    \n    while remainder != 0:\n        if remainder in seen_remainders:\n            return length - seen_remainders[remainder]\n        seen_remainders[remainder] = length\n        remainder = (remainder * 10) % K\n        length += 1\n    \n    return -1\n```", "reference_code": "    if ( K % 2 == 0 or K % 5 == 0 ) :\n        return - 1\n    number = 0\n    len = 1\n    for len in range ( 1 , K + 1 ) :\n        number = ( number * 10 + 1 ) % K\n        if number == 0 :\n            return len\n    return - 1\n"}
{"task_id": "Open/147", "problem_prompt": "import sys\n\ndef changeTheArray ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the minimum number of operations required to change all elements of the array to the same number.\n    Each operation involves subtracting or adding 1 to an element of the array.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def changeTheArray(arr, n):\n    arr.sort()\n    median = arr[n // 2]\n    operations = sum(abs(x - median) for x in arr)\n    return operations", "raw_completion": "```python\ndef changeTheArray(arr, n):\n    arr.sort()\n    median = arr[n // 2]\n    operations = sum(abs(x - median) for x in arr)\n    return operations\n```", "reference_code": "    minEle = min ( arr )\n    maxEle = max ( arr )\n    minOperations = sys . maxsize\n    for num in range ( minEle , maxEle + 1 ) :\n        operations = 0\n        for i in range ( n ) :\n            if arr [ i ] != num :\n                operations += ( abs ( num - arr [ i ] ) - 1 )\n        minOperations = min ( minOperations , operations )\n    return minOperations\n"}
{"task_id": "Open/148", "problem_prompt": "def calSum ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the sum of the first n numbers in a specific sequence.\n    The sequence starts with 3, followed by 3, 5, and then each subsequent number is the sum of the previous two numbers.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def calSum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 6\n    else:\n        a, b = 3, 5\n        sum_seq = 8\n        for _ in range(3, n):\n            a, b = b, a + b\n            sum_seq += b\n        return sum_seq", "raw_completion": "```python\ndef calSum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 6\n    else:\n        a, b = 3, 5\n        sum_seq = 8\n        for _ in range(3, n):\n            a, b = b, a + b\n            sum_seq += b\n        return sum_seq\n```", "reference_code": "    a = 3\n    b = 0\n    c = 2\n    if ( n == 0 ) :\n        return 3\n    if ( n == 1 ) :\n        return 3\n    if ( n == 2 ) :\n        return 5\n    sum = 5\n    while ( n > 2 ) :\n        d = a + b\n        sum = sum + d\n        a = b\n        b = c\n        c = d\n        n = n - 1\n    return sum\n"}
{"task_id": "Open/149", "problem_prompt": "def sqroot ( s ) :\n    \"\"\"Write a function that takes a number as input and returns its square root.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef sqroot(s):\n    return math.sqrt(s)", "raw_completion": "```python\nimport math\n\ndef sqroot(s):\n    return math.sqrt(s)\n```", "reference_code": "    pSq = 0 ;\n    N = 0 ;\n    for i in range ( int ( s ) , 0 , - 1 ) :\n        for j in range ( 1 , i ) :\n            if ( j * j == i ) :\n                pSq = i ;\n                N = j ;\n                break ;\n        if ( pSq > 0 ) :\n            break ;\n    d = s - pSq ;\n    P = d / ( 2.0 * N ) ;\n    A = N + P ;\n    sqrt_of_s = A - ( ( P * P ) / ( 2.0 * A ) ) ;\n    return sqrt_of_s ;\n"}
{"task_id": "Open/150", "problem_prompt": "def getProbability ( p , q ) :\n    \"\"\"Write a function that takes two numbers, p and q, and returns the probability calculated using the formula (p^2 + q^2) / (p + q), where p and q are divided by 100 before the calculation.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def getProbability(p, q):\n    return ((p/100)**2 + (q/100)**2) / ((p/100) + (q/100))", "raw_completion": "```python\ndef getProbability(p, q):\n    return ((p/100)**2 + (q/100)**2) / ((p/100) + (q/100))\n```", "reference_code": "    p /= 100\n    q /= 100\n    probability = ( p * p + q * q ) / ( p + q )\n    return probability\n"}
{"task_id": "Open/151", "problem_prompt": "def XorAscii ( str1 , len1 ) :\n    \"\"\"Write a function that takes a string and its length as input and returns the XOR of the ASCII values of all the characters in the string.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def XorAscii(str1, len1):\n    xor_result = 0\n    for i in range(len1):\n        xor_result ^= ord(str1[i])\n    return xor_result", "raw_completion": "```python\ndef XorAscii(str1, len1):\n    xor_result = 0\n    for i in range(len1):\n        xor_result ^= ord(str1[i])\n    return xor_result\n```", "reference_code": "    ans = ord ( str1 [ 0 ] )\n    for i in range ( 1 , len1 ) :\n        ans = ( ans ^ ( ord ( str1 [ i ] ) ) )\n    return ans\n"}
{"task_id": "Open/152", "problem_prompt": "def check_binary ( n ) :\n    \"\"\"Write a function that takes an integer as input and checks if its binary representation contains consecutive 1's.\n    If it does, the function should return False.\n    Otherwise, it should return True.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def check_binary(n):\n    while n > 0:\n        if n % 2 == 1 and (n // 2) % 2 == 1:\n            return False\n        n //= 2\n    return True", "raw_completion": "```python\ndef check_binary(n):\n    while n > 0:\n        if n % 2 == 1 and (n // 2) % 2 == 1:\n            return False\n        n //= 2\n    return True\n```", "reference_code": "    prev_last = 0\n    while ( n ) :\n        if ( ( n & 1 ) and prev_last ) :\n            return False\n        prev_last = n & 1\n        n >>= 1\n    return True\n"}
{"task_id": "Open/153", "problem_prompt": "def areVowelsInOrder ( s ) :\n    \"\"\"Write a function that takes a string as input and returns True if the vowels in the string are in alphabetical order, and False otherwise.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def areVowelsInOrder(s):\n    vowels = \"aeiou\"\n    s_vowels = [char for char in s if char.lower() in vowels]\n    return s_vowels == sorted(s_vowels)", "raw_completion": "```python\ndef areVowelsInOrder(s):\n    vowels = \"aeiou\"\n    s_vowels = [char for char in s if char.lower() in vowels]\n    return s_vowels == sorted(s_vowels)\n```", "reference_code": "    n = len ( s )\n    c = chr ( 64 )\n    for i in range ( 1 , n ) :\n        if ( s [ i ] == 'a' or s [ i ] == 'e' or s [ i ] == 'i' or s [ i ] == 'o' or s [ i ] == 'u' ) :\n            if s [ i ] < c :\n                return False\n            else :\n                c = s [ i ]\n    return True\n"}
{"task_id": "Open/154", "problem_prompt": "def countLastDigitK ( low , high , k ) :\n    \"\"\"Write a function that takes three integers (low, high, k) and returns the count of numbers between low and high (inclusive) whose last digit is greater than or equal to k.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countLastDigitK(low, high, k):\n    count = 0\n    for num in range(low, high + 1):\n        if num % 10 >= k:\n            count += 1\n    return count", "raw_completion": "```python\ndef countLastDigitK(low, high, k):\n    count = 0\n    for num in range(low, high + 1):\n        if num % 10 >= k:\n            count += 1\n    return count\n```", "reference_code": "    count = ( high - low ) / 10\n    if ( high % 10 >= k ) :\n        count += 1\n    if ( low % 10 > k ) :\n        count -= 1\n    return int ( count )\n"}
{"task_id": "Open/155", "problem_prompt": "import math\n\ndef minAbsDiff ( n ) :\n    \"\"\"Write a function that takes an integer as input and returns the minimum absolute difference between the input number and the nearest power of 2.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef minAbsDiff(n):\n    lower_power = 2 ** math.floor(math.log2(n))\n    upper_power = 2 ** math.ceil(math.log2(n))\n    return min(abs(n - lower_power), abs(n - upper_power))", "raw_completion": "```python\nimport math\n\ndef minAbsDiff(n):\n    lower_power = 2 ** math.floor(math.log2(n))\n    upper_power = 2 ** math.ceil(math.log2(n))\n    return min(abs(n - lower_power), abs(n - upper_power))\n```", "reference_code": "    left = 1 << ( int ) ( math . floor ( math . log2 ( n ) ) )\n    right = left * 2\n    return min ( ( n - left ) , ( right - n ) )\n"}
{"task_id": "Open/156", "problem_prompt": "def ReuleauxArea ( r ) :\n    \"\"\"Write a function that takes a radius as input and returns the area of a Reuleaux triangle with that radius.\n    If the input radius is negative, the function should return -1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef ReuleauxArea(r):\n    if r < 0:\n        return -1\n    else:\n        area = (math.sqrt(3) / 4) * r**2 + (math.pi / 6) * r**2\n        return area", "raw_completion": "```python\nimport math\n\ndef ReuleauxArea(r):\n    if r < 0:\n        return -1\n    else:\n        area = (math.sqrt(3) / 4) * r**2 + (math.pi / 6) * r**2\n        return area\n```", "reference_code": "    if ( r < 0 ) :\n        return - 1\n    A = 0.70477 * 2 * pow ( r , 2 )\n    return A\n"}
{"task_id": "Open/157", "problem_prompt": "def newString ( s ) :\n    \"\"\"Write a function that takes a string as input and returns a new string that contains all the characters from the input string sorted in alphabetical order.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def newString(s):\n    return ''.join(sorted(s))", "raw_completion": "```python\ndef newString(s):\n    return ''.join(sorted(s))\n```", "reference_code": "    l = len ( s )\n    freq = [ 0 ] * ( 26 )\n    for i in range ( 0 , l ) :\n        freq [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1\n    ans = \"\"\n    for i in range ( 0 , 26 ) :\n        for j in range ( 0 , freq [ i ] ) :\n            ans += chr ( 97 + i )\n    return ans\n"}
{"task_id": "Open/158", "problem_prompt": "def search ( ar , size ) :\n    \"\"\"Write a function that takes an array and its size as input and returns the missing number in the array.\n    The array is sorted in ascending order and contains consecutive integers, except for one missing number.\n    The function uses binary search to find the missing number.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def search(ar, size):\n    left, right = 0, size - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if ar[mid] != mid + ar[0]:\n            if mid == 0 or ar[mid - 1] == mid - 1 + ar[0]:\n                return mid + ar[0]\n            right = mid - 1\n        else:\n            left = mid + 1\n    return size + ar[0]", "raw_completion": "```python\ndef search(ar, size):\n    left, right = 0, size - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if ar[mid] != mid + ar[0]:\n            if mid == 0 or ar[mid - 1] == mid - 1 + ar[0]:\n                return mid + ar[0]\n            right = mid - 1\n        else:\n            left = mid + 1\n    return size + ar[0]\n```", "reference_code": "    a = 0\n    b = size - 1\n    mid = 0\n    while b > a + 1 :\n        mid = ( a + b ) // 2\n        if ( ar [ a ] - a ) != ( ar [ mid ] - mid ) :\n            b = mid\n        elif ( ar [ b ] - b ) != ( ar [ mid ] - mid ) :\n            a = mid\n    return ar [ mid ] + 1\n"}
{"task_id": "Open/159", "problem_prompt": "def minSteps ( str ) :\n    \"\"\"Write a function that takes a string as input and counts the number of occurrences of the substring \"010\" in the string.\n    The function returns the count.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def minSteps(str):\n    return str.count(\"010\")", "raw_completion": "```python\ndef minSteps(str):\n    return str.count(\"010\")\n```", "reference_code": "    count = 0\n    i = 0\n    while i < len ( str ) - 2 :\n        if str [ i ] == '0' :\n            if ( str [ i + 1 ] == '1' ) :\n                if ( str [ i + 2 ] == '0' ) :\n                    count = count + 1\n                    i = i + 2\n        i = i + 1\n    return count\n"}
{"task_id": "Open/160", "problem_prompt": "def firstEven ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the first element in the array that appears an odd number of times.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def firstOdd(arr, n):\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    for i in range(n):\n        if count[arr[i]] % 2 != 0:\n            return arr[i]\n    return -1", "raw_completion": "```python\ndef firstOdd(arr, n):\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    for i in range(n):\n        if count[arr[i]] % 2 != 0:\n            return arr[i]\n    return -1\n```", "reference_code": "    map1 = { }\n    for i in range ( 0 , n ) :\n        if arr [ i ] not in map1 :\n            map1 [ arr [ i ] ] = False\n        else :\n            map1 [ arr [ i ] ] = not map1 [ arr [ i ] ]\n    for j in range ( 0 , n ) :\n        if map1 [ arr [ j ] ] == True :\n            break\n    return arr [ j ]\n"}
{"task_id": "Open/161", "problem_prompt": "def maxXOR ( arr , n ) :\n    \"\"\"Write a function that takes an array of integers and the length of the array as input.\n    The function calculates the XOR of all the elements in the array and stores it in a variable called xorArr.\n    Then, it initializes a variable called ans to 0.\n    The function then iterates through the array and calculates the XOR of xorArr and the current element.\n    It compares this XOR value with the current value of ans and updates ans if the XOR value is greater.\n    Finally, the function returns the value of ans.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def maxXOR(arr, n):\n    xorArr = 0\n    for i in range(n):\n        xorArr ^= arr[i]\n    ans = 0\n    for i in range(n):\n        current_xor = xorArr ^ arr[i]\n        if current_xor > ans:\n            ans = current_xor\n    return ans", "raw_completion": "```python\ndef maxXOR(arr, n):\n    xorArr = 0\n    for i in range(n):\n        xorArr ^= arr[i]\n    ans = 0\n    for i in range(n):\n        current_xor = xorArr ^ arr[i]\n        if current_xor > ans:\n            ans = current_xor\n    return ans\n```", "reference_code": "    xorArr = 0\n    for i in range ( n ) :\n        xorArr ^= arr [ i ]\n    ans = 0\n    for i in range ( n ) :\n        ans = max ( ans , ( xorArr ^ arr [ i ] ) )\n    return ans\n"}
{"task_id": "Open/162", "problem_prompt": "def isReachable ( sx , sy , dx , dy ) :\n    \"\"\"Write a function that takes four integers (sx, sy, dx, dy) and returns True if it is possible to reach the destination point (dx, dy) starting from the source point (sx, sy) by only moving in two directions: either adding the y-coordinate to the x-coordinate or adding the x-coordinate to the y-coordinate.\n    Otherwise, it returns False.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def isReachable(sx, sy, dx, dy):\n    while sx < dx and sy < dy:\n        if sx < sy:\n            sx += sy\n        else:\n            sy += sx\n    return sx == dx and sy == dy", "raw_completion": "```python\ndef isReachable(sx, sy, dx, dy):\n    while sx < dx and sy < dy:\n        if sx < sy:\n            sx += sy\n        else:\n            sy += sx\n    return sx == dx and sy == dy\n```", "reference_code": "    if ( sx > dx or sy > dy ) :\n        return False\n    if ( sx == dx and sy == dy ) :\n        return True\n    return ( isReachable ( sx + sy , sy , dx , dy ) or isReachable ( sx , sy + sx , dx , dy ) )\n"}
{"task_id": "Open/163", "problem_prompt": "def cntWays ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the number of ways to divide n into pairs of numbers, such that each pair consists of two consecutive numbers and the sum of each pair is divisible by 4.\n    If n is odd, the function should return 0.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def cntWays(n):\n    if n % 2 != 0:\n        return 0\n    count = 0\n    for i in range(1, n//2 + 1):\n        if (i + (i + 1)) % 4 == 0:\n            count += 1\n    return count", "raw_completion": "```python\ndef cntWays(n):\n    if n % 2 != 0:\n        return 0\n    count = 0\n    for i in range(1, n//2 + 1):\n        if (i + (i + 1)) % 4 == 0:\n            count += 1\n    return count\n```", "reference_code": "    if n % 2 == 1 :\n        return 0\n    else :\n        return ( n - 2 ) // 4\n"}
{"task_id": "Open/164", "problem_prompt": "def countSubseq ( arr , n ) :\n    \"\"\"Write a function that takes an array and its length as input and returns the count of all possible subsequences in the array.\n    A subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\n    The function uses a dictionary to count the occurrences of each element in the array and then calculates the count by multiplying the values of the dictionary.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countSubseq(arr, n):\n    from collections import defaultdict\n    \n    # Dictionary to store frequency of each element\n    freq = defaultdict(int)\n    \n    # Count frequency of each element in the array\n    for i in range(n):\n        freq[arr[i]] += 1\n    \n    # Calculate the number of subsequences\n    result = 1\n    for count in freq.values():\n        result *= (count + 1)\n    \n    return result - 1  # Subtract 1 to exclude the empty subsequence", "raw_completion": "```python\ndef countSubseq(arr, n):\n    from collections import defaultdict\n    \n    # Dictionary to store frequency of each element\n    freq = defaultdict(int)\n    \n    # Count frequency of each element in the array\n    for i in range(n):\n        freq[arr[i]] += 1\n    \n    # Calculate the number of subsequences\n    result = 1\n    for count in freq.values():\n        result *= (count + 1)\n    \n    return result - 1  # Subtract 1 to exclude the empty subsequence\n```", "reference_code": "    um = { i : 0 for i in range ( 8 ) }\n    count = 1\n    for i in range ( n ) :\n        um [ arr [ i ] ] += 1\n    for key , values in um . items ( ) :\n        if ( values > 0 ) :\n            count *= values\n    return count\n"}
{"task_id": "Open/165", "problem_prompt": "def AVLnodes ( height ) :\n    \"\"\"Write a function that takes an integer height and returns the number of nodes in an AVL tree of that height.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def AVLnodes(height):\n    if height <= 0:\n        return 0\n    else:\n        return 2 ** (height - 1) + AVLnodes(height - 1)", "raw_completion": "```python\ndef AVLnodes(height):\n    if height <= 0:\n        return 0\n    else:\n        return 2 ** (height - 1) + AVLnodes(height - 1)\n```", "reference_code": "    if ( height == 0 ) :\n        return 1\n    elif ( height == 1 ) :\n        return 2\n    return ( 1 + AVLnodes ( height - 1 ) + AVLnodes ( height - 2 ) )\n"}
{"task_id": "Open/166", "problem_prompt": "import sys\n\ndef steps ( source , step , dest ) :\n    \"\"\"Write a function that takes three integers: source, step, and dest.\n    The function calculates the minimum number of steps needed to reach the destination (dest) starting from the source, where each step can be either positive or negative.\n    If it is not possible to reach the destination, the function returns sys.\n   maxsize.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import sys\n\ndef steps(source, step, dest):\n    if (dest - source) % step != 0:\n        return sys.maxsize\n    else:\n        return abs((dest - source) // step)", "raw_completion": "```python\nimport sys\n\ndef steps(source, step, dest):\n    if (dest - source) % step != 0:\n        return sys.maxsize\n    else:\n        return abs((dest - source) // step)\n```", "reference_code": "    if ( abs ( source ) > ( dest ) ) :\n        return sys . maxsize\n    if ( source == dest ) :\n        return step\n    pos = steps ( source + step + 1 , step + 1 , dest )\n    neg = steps ( source - step - 1 , step + 1 , dest )\n    return min ( pos , neg )\n"}
{"task_id": "Open/167", "problem_prompt": "def countnndSay ( n ) :\n    \"\"\"Write a function that takes an integer n and returns the nth term of the \"Count and Say\" sequence.\n    The \"Count and Say\" sequence starts with \"1\" and each subsequent term is generated by counting the number of consecutive digits and saying them out loud.\n    For example, the second term is \"11\" because there is one \"1\" in the first term.\n    The third term is \"21\" because there are two \"1\"s in the second term.\n    The fourth term is \"1211\" because there is one \"2\" and one \"1\" in the third term.\n    And so on.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countAndSay(n):\n    if n == 1:\n        return \"1\"\n    prev = \"1\"\n    for _ in range(1, n):\n        next_term = \"\"\n        i = 0\n        while i < len(prev):\n            count = 1\n            while i + 1 < len(prev) and prev[i] == prev[i + 1]:\n                i += 1\n                count += 1\n            next_term += str(count) + prev[i]\n            i += 1\n        prev = next_term\n    return prev", "raw_completion": "```python\ndef countAndSay(n):\n    if n == 1:\n        return \"1\"\n    prev = \"1\"\n    for _ in range(1, n):\n        next_term = \"\"\n        i = 0\n        while i < len(prev):\n            count = 1\n            while i + 1 < len(prev) and prev[i] == prev[i + 1]:\n                i += 1\n                count += 1\n            next_term += str(count) + prev[i]\n            i += 1\n        prev = next_term\n    return prev\n```", "reference_code": "    if ( n == 1 ) :\n        return \"1\"\n    if ( n == 2 ) :\n        return \"11\"\n    s = \"11\"\n    for i in range ( 3 , n + 1 ) :\n        s += '$'\n        l = len ( s )\n        cnt = 1\n        tmp = \"\"\n        for j in range ( 1 , l ) :\n            if ( s [ j ] != s [ j - 1 ] ) :\n                tmp += str ( cnt + 0 )\n                tmp += s [ j - 1 ]\n                cnt = 1\n            else :\n                cnt += 1\n        s = tmp\n    return s ;\n"}
{"task_id": "Open/168", "problem_prompt": "def maxLength ( arr , N ) :\n    \"\"\"Write a function that takes an array and an integer N as input and returns the maximum length of a subarray such that the product of all its elements is non-negative.\n    If the product of all elements in the array is non-negative, the function should return N.\n    Otherwise, the function should find the maximum length of a subarray such that the product of all its elements is non-negative and return that length.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def maxLength(arr, N):\n    if not arr:\n        return 0\n    \n    max_len = 0\n    current_len = 0\n    negative_count = 0\n    last_negative_index = -1\n    \n    for i in range(N):\n        if arr[i] < 0:\n            negative_count += 1\n            last_negative_index = i\n        \n        if negative_count % 2 == 0:\n            max_len = max(max_len, i + 1)\n        else:\n            max_len = max(max_len, i - last_negative_index)\n    \n    return max_len", "raw_completion": "```python\ndef maxLength(arr, N):\n    if not arr:\n        return 0\n    \n    max_len = 0\n    current_len = 0\n    negative_count = 0\n    last_negative_index = -1\n    \n    for i in range(N):\n        if arr[i] < 0:\n            negative_count += 1\n            last_negative_index = i\n        \n        if negative_count % 2 == 0:\n            max_len = max(max_len, i + 1)\n        else:\n            max_len = max(max_len, i - last_negative_index)\n    \n    return max_len\n```", "reference_code": "    product = 1\n    Len = 0\n    for i in arr :\n        product *= i\n    if ( product >= 0 ) :\n        return N\n    for i in range ( N ) :\n        if ( arr [ i ] < 0 ) :\n            Len = max ( Len , max ( N - i - 1 , i ) )\n    return Len\n"}
{"task_id": "Open/169", "problem_prompt": "import math\n\ndef normal ( m , n ) :\n    \"\"\"Write a function that takes two numbers, m and n, and calculates the normal value using the formula: N = (|m| * |n|) / sqrt((|m| * |m|) + (|n| * |n|)).\n    The function then returns the calculated normal value.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef normal(m, n):\n    N = (abs(m) * abs(n)) / math.sqrt((abs(m) ** 2) + (abs(n) ** 2))\n    return N", "raw_completion": "```python\nimport math\n\ndef normal(m, n):\n    N = (abs(m) * abs(n)) / math.sqrt((abs(m) ** 2) + (abs(n) ** 2))\n    return N\n```", "reference_code": "    N = ( ( abs ( m ) * abs ( n ) ) / math . sqrt ( ( abs ( m ) * abs ( m ) ) + ( abs ( n ) * abs ( n ) ) ) ) ;\n    return N ;\n"}
{"task_id": "Open/170", "problem_prompt": "def countSubarray ( arr , n , k ) :\n    \"\"\"Write a function that takes an array, its length, and a target number as input and returns the count of subarrays whose sum is less than the target number.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countSubarray(arr, n, k):\n    count = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += arr[j]\n            if current_sum < k:\n                count += 1\n            else:\n                break\n    return count", "raw_completion": "```python\ndef countSubarray(arr, n, k):\n    count = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += arr[j]\n            if current_sum < k:\n                count += 1\n            else:\n                break\n    return count\n```", "reference_code": "    count = 0\n    for i in range ( 0 , n ) :\n        sum = 0 ;\n        for j in range ( i , n ) :\n            if ( sum + arr [ j ] < k ) :\n                sum = arr [ j ] + sum\n                count += 1\n            else :\n                break\n    return count ;\n"}
{"task_id": "Open/171", "problem_prompt": "def countTripletsLessThanL ( n , L , arr ) :\n    \"\"\"Write a function that takes three parameters: an integer n, an integer L, and a list of integers arr.\n    The function sorts the list arr in ascending order.\n    It then counts the number of triplets (i, j, k) where i < j < k and arr[k] - arr[i] is less than or equal to L.\n    The function returns the total number of such triplets.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countTripletsLessThanL(n, L, arr):\n    arr.sort()\n    count = 0\n    for i in range(n):\n        k = n - 1\n        for j in range(i + 1, n):\n            while k > j and arr[k] - arr[i] > L:\n                k -= 1\n            if k > j:\n                count += k - j\n    return count", "raw_completion": "```python\ndef countTripletsLessThanL(n, L, arr):\n    arr.sort()\n    count = 0\n    for i in range(n):\n        k = n - 1\n        for j in range(i + 1, n):\n            while k > j and arr[k] - arr[i] > L:\n                k -= 1\n            if k > j:\n                count += k - j\n    return count\n```", "reference_code": "    arr . sort ( )\n    ways = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            for k in range ( j + 1 , n ) :\n                mostDistantDistance = arr [ k ] - arr [ i ]\n                if ( mostDistantDistance <= L ) :\n                    ways += 1\n    return ways\n"}
{"task_id": "Open/172", "problem_prompt": "def findTwoThreePrime ( l , r ) :\n    \"\"\"Write a function that takes two integers, l and r, and returns the count of numbers between l and r (inclusive) that can be expressed as the product of only 2 and 3.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def findTwoThreePrime(l, r):\n    def is_product_of_two_three(n):\n        while n % 2 == 0:\n            n //= 2\n        while n % 3 == 0:\n            n //= 3\n        return n == 1\n    \n    count = 0\n    for num in range(l, r + 1):\n        if is_product_of_two_three(num):\n            count += 1\n    return count", "raw_completion": "```python\ndef findTwoThreePrime(l, r):\n    def is_product_of_two_three(n):\n        while n % 2 == 0:\n            n //= 2\n        while n % 3 == 0:\n            n //= 3\n        return n == 1\n    \n    count = 0\n    for num in range(l, r + 1):\n        if is_product_of_two_three(num):\n            count += 1\n    return count\n```", "reference_code": "    if ( l == 1 ) :\n        l += 1\n    count = 0\n    for i in range ( l , r + 1 ) :\n        num = i\n        while ( num % 2 == 0 ) :\n            num //= 2 ;\n        while ( num % 3 == 0 ) :\n            num //= 3\n        if ( num == 1 ) :\n            count += 1\n    return count\n"}
{"task_id": "Open/173", "problem_prompt": "def toggleLastMBits ( n , m ) :\n    \"\"\"Write a function that takes two integers, n and m, and returns the result of toggling the last m bits of n.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def toggleLastMBits(n, m):\n    return n ^ ((1 << m) - 1)", "raw_completion": "```python\ndef toggleLastMBits(n, m):\n    return n ^ ((1 << m) - 1)\n```", "reference_code": "    num = ( 1 << m ) - 1\n    return ( n ^ num )\n"}
{"task_id": "Open/174", "problem_prompt": "def countNumbers ( L , R , K ) :\n    \"\"\"Write a function that takes three integers L, R, and K as input and returns the count of numbers between L and R (inclusive) that are divisible by 9 or have a remainder of K when divided by 9.\n    If K is equal to 9, it is replaced with 0 before performing the calculations.\n    The function calculates the total number of numbers between L and R, divides it by 9 to get the number of numbers divisible by 9, and calculates the remainder.\n    It then iterates through the numbers from R to R - rem (inclusive) and checks if the remainder of each number divided by 9 is equal to K.\n    If it is, it increments the count.\n    Finally, it returns the count.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def countNumbers(L, R, K):\n    if K == 9:\n        K = 0\n    total_numbers = R - L + 1\n    divisible_by_9 = total_numbers // 9\n    rem = total_numbers % 9\n    count = divisible_by_9\n    for i in range(R, R - rem, -1):\n        if i % 9 == K:\n            count += 1\n    return count", "raw_completion": "```python\ndef countNumbers(L, R, K):\n    if K == 9:\n        K = 0\n    total_numbers = R - L + 1\n    divisible_by_9 = total_numbers // 9\n    rem = total_numbers % 9\n    count = divisible_by_9\n    for i in range(R, R - rem, -1):\n        if i % 9 == K:\n            count += 1\n    return count\n```", "reference_code": "    if ( K == 9 ) :\n        K = 0\n    totalnumbers = R - L + 1\n    factor9 = totalnumbers // 9\n    rem = totalnumbers % 9\n    ans = factor9\n    for i in range ( R , R - rem , - 1 ) :\n        rem1 = i % 9\n        if ( rem1 == K ) :\n            ans += 1\n    return ans\n"}
{"task_id": "Open/175", "problem_prompt": "import math\n\ndef firstkdigits ( n , k ) :\n    \"\"\"Write a function that takes two integers, n and k, and returns the first k digits of the product of n and the logarithm of n to the base 10.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "import math\n\ndef firstkdigits(n, k):\n    product = n * math.log10(n)\n    return int(str(product)[:k])", "raw_completion": "```python\nimport math\n\ndef firstkdigits(n, k):\n    product = n * math.log10(n)\n    return int(str(product)[:k])\n```", "reference_code": "    product = n * math . log ( n , 10 ) ;\n    decimal_part = product - math . floor ( product ) ;\n    decimal_part = pow ( 10 , decimal_part ) ;\n    digits = pow ( 10 , k - 1 ) ;\n    return math . floor ( decimal_part * digits ) ;\n"}
{"task_id": "Open/176", "problem_prompt": "def FindElement ( A , n ) :\n    \"\"\"Write a function that takes a list of integers and the length of the list as input.\n    The function should find and return the first element in the list that is greater than all the elements before it and less than all the elements after it.\n    If no such element exists, the function should return -1.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def FindElement(A, n):\n    for i in range(1, n-1):\n        if A[i] > max(A[:i]) and A[i] < min(A[i+1:]):\n            return A[i]\n    return -1", "raw_completion": "```python\ndef FindElement(A, n):\n    for i in range(1, n-1):\n        if A[i] > max(A[:i]) and A[i] < min(A[i+1:]):\n            return A[i]\n    return -1\n```", "reference_code": "    for i in range ( 0 , n , 1 ) :\n        flag = 0\n        for j in range ( 0 , i , 1 ) :\n            if ( A [ j ] >= A [ i ] ) :\n                flag = 1\n                break\n        for j in range ( i + 1 , n , 1 ) :\n            if ( A [ j ] <= A [ i ] ) :\n                flag = 1\n                break\n        if ( flag == 0 ) :\n            return A [ i ]\n    return - 1\n"}
{"task_id": "Open/177", "problem_prompt": "def minimumIncrease ( a , b , c ) :\n    \"\"\"Write a function that takes three integers as input and returns the minimum increase needed to make the sum of the two smallest integers greater than or equal to the largest integer.\n    \"\"\"\n", "plan_type_used": "none", "plan_steps_used": "", "generated_code": "def minimumIncrease(a, b, c):\n    numbers = sorted([a, b, c])\n    return max(0, numbers[2] - (numbers[0] + numbers[1]))", "raw_completion": "```python\ndef minimumIncrease(a, b, c):\n    numbers = sorted([a, b, c])\n    return max(0, numbers[2] - (numbers[0] + numbers[1]))\n```", "reference_code": "    arr = [ a , b , c ]\n    arr . sort ( )\n    if arr [ 0 ] + arr [ 1 ] >= arr [ 2 ] :\n        return 0\n    else :\n        return arr [ 2 ] - ( arr [ 0 ] + arr [ 1 ] )\n"}
